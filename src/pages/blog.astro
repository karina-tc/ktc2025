---
// Components
import BaseLayout from "../layouts/BaseLayout.astro";
import { Image } from "astro:assets";
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import BlogYearSection from "../components/BlogYearSection.astro";
import Subtitle from "../components/Subtitle.astro";

//Assets
import scribble from "../assets/scribbles/loop-down.svg";

const isDev = import.meta.env.PUBLIC_SHOW_DRAFTS;

// Get all blog posts and filter drafts only in production
const allPosts = await getCollection("blog", ({ data }) => {
  return isDev ? true : data.status === "published";
});

// Sort posts by date (newest first)
const sortedPosts = allPosts.sort(
  (a: CollectionEntry<"blog">, b: CollectionEntry<"blog">) =>
    b.data.publishDate.getTime() - a.data.publishDate.getTime(),
);

// Filter notebooks
const notebooks = sortedPosts.filter((post: CollectionEntry<"blog">) =>
  post.data.tags?.includes("notebook"),
);

// Group other posts by year (excluding notebooks)
const postsByYear = sortedPosts
  .filter((post) => !post.data.tags?.includes("notebook"))
  .reduce((acc: Record<number, BlogPost[]>, post: BlogPost) => {
    const year = post.data.publishDate.getFullYear();
    if (!acc[year]) acc[year] = [];
    acc[year].push(post);
    return acc;
  }, {});

type BlogPost = CollectionEntry<"blog">;
---

<BaseLayout
  title="Karina Tovar | Blog"
  description="Blog posts by Karina Tovar"
>
  <section class="neue-container pt-20 pb-10" data-intersection-observer={true}>
    <div class="mx-auto flex flex-col md:flex-row gap-4">
      <div class="flex-1 flex flex-col gap-4">
        <h4>Blog</h4>
        <h1 class="mt-4">Light notes & deep thoughts</h1>
        <p class="md:max-w-xl mt-4 caramel-text text-pretty">
          Small growing collection of thoughts as I get myself to write more.
        </p>
      </div>
      <div
        class="flex-1 md:max-w-md justify-center items-center hidden md:flex"
      >
        <Image
          src={scribble}
          alt="Scribble"
          loading="eager"
          draggable={false}
        />
      </div>
    </div>
  </section>

  {
    notebooks.length > 0 && (
      <div
        class="neue-container flex flex-col gap-2 my-10"
        data-intersection-observer={true}
      >
        <Subtitle title="Notebooks" />
        <div class="grid grid-cols-1 md:grid-cols-[repeat(auto-fill,minmax(200px,1fr))] gap-8">
          {notebooks.map((post: BlogPost, index) => (
            <div class="w-full h-full flex items-center justify-center min-h-[260px] relative group">
              <a
                id="notebook-card"
                href={`/blog/${post.slug}`}
                class={`w-full h-full border-3 border-paper dark:border-chocolate-light rounded-xl overflow-hidden transition-transform duration-300 ease-in-out hover:shadow-xl shadow-sm bg-surface dark:bg-chocolate ${
                  index % 2 === 0 ? "hover:-rotate-1" : "hover:rotate-1"
                } z-[1]`}
              >
                <div class="h-full p-8 transition-transform duration-300 ease-in-out z-[1] relative">
                  <h4 class="mb-4 mt-1 group-hover:opacity-50 transition-all duration-300 ease-in-out">
                    {post.data.category}
                  </h4>
                  <span class="inline-block text-2xl leading-none mt-1">
                    {post.data.title}
                  </span>
                </div>
                <div class="absolute left-0 top-0 opacity-0 w-0 h-full p-2 space-y-5 rounded-xl overflow-hidden transition-all duration-500 ease-in-out group-hover:w-full group-hover:opacity-40 dark:group-hover:opacity-20 delay-100">
                  {[...Array(17)].map((_, index) => (
                    <span
                      class="block w-[1px] h-full max-h-[240px] bg-chocolate-light absolute top-[9px] left-2"
                      style={`margin-left: ${index * 11.75}px`}
                    />
                  ))}
                  {[...Array(17)].map((_, index) => (
                    <span
                      class="block w-full max-w-[92%] h-[1px] border-b border-chocolate-light absolute top-[8px] left-2"
                      style={`margin-top: ${index * 15}px`}
                    />
                  ))}
                </div>
              </a>
              <div
                class={`absolute left-0 top-0 opacity-0 w-full h-full border-2 border-surface dark:border-chocolate rounded-xl bg-coffee dark:bg-ink-secondary transition-all duration-300 ease-in-out group-hover:opacity-100 ${
                  index % 2 === 0
                    ? "group-hover:-rotate-1"
                    : "group-hover:rotate-1"
                } group-hover:left-3 group-hover:top-3 delay-100 group-hover:shadow-xl`}
              />
            </div>
          ))}
        </div>
      </div>
    )
  }

  <!-- Blog Posts -->
  <div
    class="neue-container relative flex flex-col gap-10 my-20"
    data-intersection-observer={true}
  >
    <div class="flex flex-col-reverse gap-20">
      {
        Object.entries(postsByYear).map(([year, yearPosts]) => {
          const typedPosts = yearPosts as BlogPost[];
          return <BlogYearSection year={year} posts={typedPosts} />;
        })
      }
    </div>
  </div>
</BaseLayout>
