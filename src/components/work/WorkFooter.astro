---
import { Image } from "astro:assets";
import heartSolid from "../../assets/icons/heart-solid.svg";
import heartLine from "../../assets/icons/heart-line.svg";
import messageBubbleLine from "../../assets/icons/message-bubble-line.svg";
import messageBubbleSolid from "../../assets/icons/message-bubble-solid.svg";
import closeLine from "../../assets/icons/close-line.svg";

export interface Props {
  endingText?: string;
}

const { endingText = "El fin." } = Astro.props;
---

<div class="work-footer">
  <div class="work-footer-text">
    <span>{endingText}</span>
  </div>
  <div class="work-footer-buttons">
    <button id="love-button">
      <div class="icon-container heart">
        <Image class="heart-line" src={heartLine} alt="Heart" />
        <Image class="heart-solid" src={heartSolid} alt="Heart" />
      </div>
      <span>Show some love</span>
    </button>
    <button id="feedback-button">
      <div class="icon-container message-bubble">
        <Image
          class="message-bubble-line"
          src={messageBubbleLine}
          alt="Message Bubble"
        />
        <Image
          class="message-bubble-solid"
          src={messageBubbleSolid}
          alt="Message Bubble"
        />
      </div>
      <span>Leave some feedback</span>
    </button>
  </div>
</div>

<dialog id="feedback-dialog" class="feedback-dialog">
  <form method="dialog" class="feedback-form">
    <button type="button" class="close-button" id="close-feedback">
      <Image src={closeLine} alt="Close" />
    </button>
    <div class="form-area">
      <h1>Share Your Thoughts</h1>
      <div class="form-group">
        <input
          type="text"
          id="name"
          name="name"
          autocomplete="off"
          required
          placeholder="Your Name"
        />
        <label for="name">Your Name</label>
      </div>
      <div class="form-group">
        <textarea
          id="feedback-positive"
          name="feedback_positive"
          rows="4"
          required
          placeholder="What worked well in my telling of this project?"
        ></textarea>
        <label for="feedback-positive"
          >What worked well in my telling of this project?</label
        >
      </div>
      <div class="form-group">
        <textarea
          id="feedback-improvement"
          name="feedback_improvement"
          rows="4"
          required
          placeholder="What could be improved?"></textarea>
        <label for="feedback-improvement">What could be improved?</label>
      </div>
      <input type="hidden" id="page_url" name="page_url" value="" />
      <button type="submit" class="submit-button">Send Feedback</button>
    </div>
    <div class="success-message">
      <p>Thank you!</p>
      <span>Your feedback is appreciated.</span>
    </div>
  </form>
</dialog>

<script>
  const loveButton = document.getElementById("love-button");

  if (loveButton) {
    loveButton.addEventListener("click", async (event) => {
      try {
        const heartLine = loveButton.querySelector(
          ".heart-line",
        ) as HTMLElement;
        const heartSolid = loveButton.querySelector(
          ".heart-solid",
        ) as HTMLElement;
        const heartContainer = loveButton.querySelector(
          ".icon-container.heart",
        ) as HTMLElement;

        if (heartLine && heartSolid && heartContainer) {
          // Hide line heart, show solid heart
          (heartLine as HTMLElement).style.opacity = "0";
          (heartSolid as HTMLElement).style.opacity = "1";

          // Add bounce animation
          (heartContainer as HTMLElement).style.animation =
            "heartBounce 0.5s cubic-bezier(0.17, 0.89, 0.32, 1.49)";

          // Reset animation
          heartContainer.addEventListener(
            "animationend",
            () => {
              (heartContainer as HTMLElement).style.animation = "";
            },
            { once: true },
          );

          // Reset heart state after 2 seconds
          setTimeout(() => {
            heartLine.style.cssText = "opacity: 1";
            heartSolid.style.cssText = "opacity: 0";
          }, 2000);
        }

        // Record love via API
        await fetch("/api/record-love", {
          method: "POST",
          mode: "no-cors",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            page_path: window.location.pathname,
          }),
        });
      } catch (error) {
        console.error("Error:", error);
      }
    });
  }

  // Feedback dialog logic
  const dialog = document.getElementById(
    "feedback-dialog",
  ) as HTMLDialogElement;
  const feedbackButton = document.getElementById("feedback-button");
  const cancelButton = document.getElementById("close-feedback");
  const feedbackForm = dialog?.querySelector("form");
  const pageUrlInput = document.getElementById("page_url") as HTMLInputElement;

  if (feedbackButton && dialog) {
    feedbackButton.addEventListener("click", () => {
      pageUrlInput.value = window.location.pathname;
      dialog.showModal();
    });
  }

  if (cancelButton) {
    cancelButton.addEventListener("click", () => {
      dialog.close();
    });
  }

  if (feedbackForm) {
    feedbackForm.addEventListener("submit", async (e) => {
      e.preventDefault();

      const formData = new FormData(feedbackForm);
      const payload = {
        name: formData.get("name"),
        feedback_positive: formData.get("feedback_positive"),
        feedback_improvement: formData.get("feedback_improvement"),
        page_url: formData.get("page_url"),
      };

      try {
        const response = await fetch("/api/submit-feedback", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(payload),
        });

        if (!response.ok) {
          const errorData = await response.text();
          throw new Error(`Failed to submit feedback: ${errorData}`);
        }

        const formArea = feedbackForm.querySelector(".form-area");
        const successMessage = feedbackForm.querySelector(".success-message");
        if (formArea && successMessage) {
          formArea.style.display = "none";
          successMessage.style.display = "block";
        }
        setTimeout(() => {
          dialog.close();
        }, 2000);
      } catch (error) {
        alert("Failed to submit feedback. Please try again.");
      }
    });
  }
</script>

<style lang="scss">
  @import "../../styles/base/_breakpoints.scss";

  .work-footer {
    width: 90%;
    max-width: var(--content-narrow);
    margin: 0 auto;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--spacing-base);

    .work-footer-text {
      color: var(--color-ink-tertiary);
      font-size: clamp(1.25rem, 4vw, 1.75rem);
      font-family: var(--font-headings);
    }

    .work-footer-buttons {
      display: flex;
      gap: var(--spacing-base);

      button {
        display: flex;
        align-items: center;
        gap: var(--spacing-small);
        font-size: var(--font-size-base);
        position: relative;

        .icon-container {
          position: relative;
          width: 24px;
          height: 24px;
          transform-origin: center;
        }

        .heart-line,
        .heart-solid,
        .message-bubble-line,
        .message-bubble-solid {
          position: absolute;
          left: 0;
          transition: opacity 0.3s ease-in-out;
        }

        .heart-solid,
        .message-bubble-solid {
          opacity: 0;
        }

        &:hover {
          .heart-line,
          .message-bubble-line {
            opacity: 0;
          }
          .heart-solid,
          .message-bubble-solid {
            opacity: 1;
          }
        }

        span {
          border-bottom: 1px dotted var(--color-ink-tertiary);
          transition: all 0.3s ease-in-out;
        }

        &:hover {
          span {
            border-color: var(--color-accent);
          }
        }
      }

      @include mobile {
        flex-direction: column;
        align-items: flex-start;
        gap: var(--spacing-base);
      }
    }

    @include tablet {
      flex-direction: column;
      align-items: flex-start;
      padding: var(--spacing-base) 0;
      gap: var(--spacing-base);
    }
  }

  .feedback-dialog {
    padding: 0;
    border: 0;
    border-radius: var(--border-radius-large);
    max-width: 500px;
    width: 90%;
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    margin: 0;
    box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.1);

    &::backdrop {
      background-color: rgba(255, 255, 255, 0.5);
      backdrop-filter: blur(4px);
    }
  }

  .success-message {
    font-size: var(--font-size-small);
    font-weight: 500;
    font-family: var(--font-sans);
    color: var(--color-ink-tertiary);
    margin-top: var(--spacing-small);
    display: none;
    transition: opacity 0.3s ease-in-out;

    p {
      font-size: clamp(2.25rem, 4vw, 3rem);
      font-family: var(--font-headings);
      color: var(--color-coffee);
    }

    &.visible {
      display: block;
    }
  }

  .feedback-form {
    padding: var(--spacing-base);
    margin: auto;
    position: relative;

    .close-button {
      position: absolute;
      top: 36px;
      right: var(--spacing-base);
      background-color: transparent;
      border: none;
      cursor: pointer;
    }

    .form-area {
      display: flex;
      flex-direction: column;

      .form-group {
        font-weight: 500;
        position: relative;

        label {
          display: block;
          font-family: var(--font-sans);
          font-size: var(--font-size-small);
          color: var(--color-ink-tertiary);
          position: absolute;
          top: 24px;
          left: 12px;
          transform: translateY(-50%);
          background-color: transparent;
          padding: 0 var(--spacing-xsmall);
          transition: all 0.3s ease-in-out;
        }

        input,
        textarea {
          width: 100%;
          max-width: 100%;
          min-width: 100%;
          height: 40px;
          min-height: 52px;
          padding: var(--spacing-small);
          border: 2px solid transparent;
          outline: none;
          border-radius: var(--border-radius-base);
          font-family: var(--font-sans);
          font-size: var(--font-size-small);
          background-color: var(--color-surface);
          font-weight: 500;
          color: var(--color-ink);
          transition: all 0.3s ease-in-out;

          &::placeholder {
            color: transparent;
            font-weight: 500;
          }

          &:focus {
            border: 2px solid var(--color-coffee);
            background-color: white;
            & ~ label {
              top: 0;
              transform: translateY(-25%);
              background-color: white;
            }
          }

          &:not(:placeholder-shown) {
            background-color: white;
            border: 2px solid var(--color-coffee);

            & ~ label {
              top: 0;
              transform: translateY(-25%);
              background-color: white;
            }
          }
        }

        textarea {
          height: auto;
          min-height: 40px;
          max-height: 160px;
          padding-top: 16px;
        }

        input {
          margin-bottom: var(--spacing-small);
        }
      }

      .submit-button {
        width: 100%;
        padding: var(--spacing-small) var(--spacing-base);
        border-radius: var(--border-radius-base);
        font-weight: 500;
        color: var(--color-paper);
        background-color: var(--color-accent-light);
        cursor: pointer;
        transition: all 0.3s ease-in-out;
        border: none;
        margin-bottom: var(--spacing-small);

        &:hover,
        &:focus {
          background-color: var(--color-accent);
        }
      }
    }

    h1 {
      font-size: clamp(1.25rem, 4vw, 2rem);
      margin: 0 0 var(--spacing-base);
      font-family: var(--font-headings);
      color: var(--color-coffee);
    }
  }

  @keyframes heartBounce {
    0% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.4);
    }
    100% {
      transform: scale(1);
    }
  }
</style>
