---
import Atom from "../components/Atom.astro";
import ReturnButton from "../components/poem/ReturnButton.astro";
import PlayButton from "../components/poem/PlayButton.astro";
import PoemContent from "../components/poem/PoemContent.astro";
---

<!-- Return -->
<ReturnButton />

<!-- Play button -->
<PlayButton />

<!-- Pulse -->
<div class="pulse hidden">
  <Atom />
</div>

<!-- Poem -->
<PoemContent />

<!-- Ripple element -->
<div class="ripple hidden"></div>

<script>
  // Cache DOM elements and initial audio setup
  const forestAudio = new Audio("/assets/music/forest.mp3");
  forestAudio.loop = true;
  forestAudio.volume = 0.2;

  const elements = {
    footnote: document.querySelector(".footnote"),
    poem: document.querySelector(".poem-wrapper"),
    poemContent: document.querySelector(".poem"),
    contentWrapper: document.querySelector(".content-wrapper"),
    detailsWrapper: document.querySelector(".details-wrapper"),
    returnButton: document.querySelector(".return"),
    backgroundWrapper: document.querySelector(".background-wrapper"),
    playButton: document.querySelector(".play-button"),
    volumeControl: document.querySelector(".volume-control"),
    volumeSlider: document.querySelector(".volume-slider") as HTMLInputElement,
    playIcon: document.querySelector(".play-icon"),
    tooltip: document.querySelector(".volume-tooltip"),
    buttonText: document.querySelector(".play-text"),
    pulse: document.querySelector(".pulse"),
  } as const;

  let volumeTimeout: number;

  // Add state management
  const state = {
    isPoemActive: false,
    poemTimeout: null as number | null,
  };

  // Set initial volume slider value to 20
  if (elements.volumeSlider) {
    elements.volumeSlider.value = "20";
  }
  if (elements.tooltip) {
    elements.tooltip.textContent = "20%";
  }

  // Utility functions
  const fadeAudio = (
    audio: HTMLAudioElement,
    targetVolume: number,
    duration = 2000,
  ) => {
    const startVolume = audio.volume;
    const volumeDiff = targetVolume - startVolume;
    const interval = 50;
    const steps = duration / interval;
    const volumeStep = volumeDiff / steps;

    const fade = setInterval(() => {
      if (
        (volumeStep > 0 && audio.volume < targetVolume) ||
        (volumeStep < 0 && audio.volume > targetVolume)
      ) {
        audio.volume = Math.max(0, Math.min(1, audio.volume + volumeStep));
      } else {
        clearInterval(fade);
        if (targetVolume === 0) {
          audio.pause();
          audio.currentTime = 0;
        }
      }
    }, interval);
  };

  const handleVolumeControl = () => {
    clearTimeout(volumeTimeout);
    volumeTimeout = setTimeout(() => {
      elements.volumeControl?.classList.add("hidden");
      elements.playIcon?.classList.remove("menu-open");
    }, 2000);
  };

  // Event Listeners
  elements.playIcon?.addEventListener("click", (e) => {
    e.stopPropagation();
    elements.volumeControl?.classList.toggle("hidden");
    elements.playIcon?.classList.toggle("menu-open");
    handleVolumeControl();
  });

  elements.volumeSlider?.addEventListener("input", (e) => {
    const volume = parseInt((e.target as HTMLInputElement).value);
    forestAudio.volume = volume / 100;
    if (elements.tooltip) {
      elements.tooltip.textContent = `${volume}%`;
    }
    handleVolumeControl();
  });

  document.addEventListener("click", (e) => {
    if (!elements.playIcon?.contains(e.target as Node)) {
      elements.volumeControl?.classList.add("hidden");
      elements.playIcon?.classList.remove("menu-open");
      clearTimeout(volumeTimeout);
    }
  });

  elements.playButton?.addEventListener("click", (e) => {
    if (e.target === elements.volumeSlider) return;

    if (forestAudio.paused) {
      forestAudio.play();
      fadeAudio(forestAudio, 0.4);
      if (elements.buttonText) elements.buttonText.textContent = "Pause Music";
      elements.playIcon?.classList.add("playing");
    } else {
      fadeAudio(forestAudio, 0);
      if (elements.buttonText) elements.buttonText.textContent = "Play Music";
      elements.playIcon?.classList.remove("playing");
    }
  });

  // Function to wrap text nodes in spans while preserving HTML structure
  function wrapTextNodes(element: Element) {
    const walk = document.createTreeWalker(
      element,
      NodeFilter.SHOW_TEXT,
      null
    );

    const textNodes = [];
    let node;
    while (node = walk.nextNode()) {
      textNodes.push(node);
    }

    textNodes.forEach(textNode => {
      const text = textNode.textContent || '';
      const spans = text.split('').map(char => {
        const span = document.createElement('span');
        span.className = 'char';
        span.style.opacity = '0.25'; // Set initial opacity directly
        span.textContent = char;
        return span;
      });
      
      const fragment = document.createDocumentFragment();
      spans.forEach(span => fragment.appendChild(span));
      textNode.parentNode?.replaceChild(fragment, textNode);
    });
  }

  // Run character wrapping when entering poem view
  const enterPoemView = () => {
    state.isPoemActive = true;
    const ripple = document.querySelector(".ripple");
    ripple?.classList.remove("hidden");
    ripple?.classList.add("animate");

    setTimeout(() => {
      if (!state.isPoemActive) return;
      elements.poem?.classList.remove("hidden");
      elements.returnButton?.classList.remove("hidden");
      elements.playButton?.classList.remove("hidden");
      elements.contentWrapper?.classList.add("hidden");
      elements.detailsWrapper?.classList.add("hidden");
      elements.footnote?.setAttribute("style", "display: none");
      elements.backgroundWrapper?.classList.add("joy");
      elements.pulse?.classList.remove("hidden");

      ripple?.classList.remove("animate");
      ripple?.classList.add("hidden");

      // Auto-play music
      forestAudio.play();
      fadeAudio(forestAudio, 0.2);
      if (elements.buttonText) elements.buttonText.textContent = "Pause Music";
      elements.playIcon?.classList.add("playing");

      // Wrap characters and start typing
      const poemText = document.querySelector('.poem-text');
      if (poemText) {
        wrapTextNodes(poemText);
        typePoem(poemText);
      }
    }, 1500);
  };

  // Function to exit poem view
  const exitPoemView = () => {
    // Clear any pending timeouts
    if (state.poemTimeout) {
      clearTimeout(state.poemTimeout);
      state.poemTimeout = null;
    }
    state.isPoemActive = false;

    const ripple = document.querySelector(".ripple");
    ripple?.classList.remove("hidden");
    ripple?.classList.add("animate");

    setTimeout(() => {
      elements.poem?.classList.add("hidden");
      elements.returnButton?.classList.add("hidden");
      elements.playButton?.classList.add("hidden");
      elements.contentWrapper?.classList.remove("hidden");
      elements.detailsWrapper?.classList.remove("hidden");
      elements.footnote?.removeAttribute("style");
      elements.backgroundWrapper?.classList.remove("joy");
      elements.pulse?.classList.add("hidden");
      ripple?.classList.remove("animate");
      ripple?.classList.add("hidden");

      fadeAudio(forestAudio, 0);
      if (elements.buttonText) elements.buttonText.textContent = "Play Music";
      elements.playIcon?.classList.remove("playing");
    }, 1500);
  };

  // Event Listeners
  elements.footnote?.addEventListener("click", enterPoemView);
  elements.returnButton?.addEventListener("click", exitPoemView);

  // ESC key handler
  document.addEventListener("keydown", (e) => {
    if (e.key === "Escape" && !elements.poem?.classList.contains("hidden")) {
      exitPoemView();
    }
  });

  // Function to simulate typing effect
  function typePoem(element: Element) {
    const chars = Array.from(element.querySelectorAll('.char'));
    console.log('Found chars for typing:', chars.length);
    
    let currentChar = 0;
    const totalChars = chars.length;
    const speed = 50;

    // Reset loading bar
    const loadingBar = document.querySelector('.loading-bar') as HTMLElement;
    const loadingPercentage = document.querySelector('.loading-percentage');
    if (loadingBar) loadingBar.style.width = '0%';
    if (loadingPercentage) loadingPercentage.textContent = '0%';

    function revealNextChar() {
      if (currentChar < totalChars) {
        const charSpan = chars[currentChar] as HTMLElement;
        charSpan.style.opacity = '1';
        
        // Check if this char is the first one in a highlight span
        const parentHighlight = charSpan.closest('.highlight');
        if (parentHighlight && 
            Array.from(parentHighlight.querySelectorAll('.char')).indexOf(charSpan) === 0) {
          parentHighlight.classList.add('reveal');
        }
        
        // Update loading progress - make it smoother by calculating exact percentage
        const progress = Math.floor((currentChar / (totalChars - 1)) * 100);
        if (loadingBar) loadingBar.style.width = `${progress}%`;
        if (loadingPercentage) loadingPercentage.textContent = `${progress}%`;
        
        currentChar++;
        setTimeout(revealNextChar, speed);
      } else {
        // Ensure we hit 100%
        if (loadingBar) loadingBar.style.width = '100%';
        if (loadingPercentage) loadingPercentage.textContent = '100%';
        
        console.log('Typing complete');
        setTimeout(() => {
          exitPoemView();
        }, 3000);
      }
    }

    revealNextChar();
  }

  // Add scroll handling
  function handleScroll() {
    const poemWrapper = document.querySelector(".poem-wrapper");
    const pulse = document.querySelector(".pulse");

    if (!poemWrapper || !pulse || poemWrapper.classList.contains("hidden"))
      return;

    const poemRect = poemWrapper.getBoundingClientRect();

    if (poemRect.top < 10) {
      pulse.classList.add("floating");
    } else if (poemRect.top < window.innerHeight - 30) {
      pulse.classList.remove("floating");
    }
  }

  // Add scroll listener
  window.addEventListener("scroll", handleScroll);

  // Clean up scroll listener when navigating away
  document.addEventListener("astro:before-swap", () => {
    window.removeEventListener("scroll", handleScroll);
  });
</script>

<style lang="scss">
  // Hidden
  .hidden {
    display: none !important;
  }

  // Pulse
  .pulse {
    position: fixed;
    top: 70px;
    left: calc(50% - 50px);
    width: 100px;
    height: 100px;
    transition: all 0.5s ease-in-out;

    max-width: 100px;
    background-color: var(--color-paper);
    border-radius: 50%;

    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 10;

    &::before {
      content: "BREATHE";
      position: absolute;
      top: -40px;
      left: calc(50% - 60px);
      z-index: 10;
      width: 120px;
      height: 20px;
      text-align: center;
      font-size: var(--font-size-xsmall);
      font-family: var(--font-sans);
      font-weight: 500;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      color: var(--color-chocolate);
    }

    &::after {
      content: "";
      position: absolute;
      top: -10px;
      left: -10px;
      z-index: -1;
      width: 120px;
      height: 120px;
      border-radius: 50%;
      background: rgba(255, 255, 255, 0.5);
      animation: pulsate 2s infinite;
      border: 1px solid var(--color-paper);
    }

    @include tablet {
      display: none !important;
    }

    &.floating {
      transform: translateY(-100px);
      opacity: 0;
      height: 0;
      overflow: hidden;
    }
  }

  @keyframes fadeInDown {
    from {
      opacity: 0;
      transform: translateY(-10%);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  // Ripple effect
  .ripple {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 0;
    height: 0;
    background: rgba(255, 255, 255, 0.9);
    backdrop-filter: blur(10px);
    filter: blur(10px);
    border-radius: 50%;
    opacity: 0;
    z-index: 1000;
    pointer-events: none;

    &.animate {
      animation: rippleEffect 2.2s ease-in forwards;
    }
  }

  @keyframes rippleEffect {
    0% {
      width: 0;
      height: 0;
      opacity: 0;
    }
    50% {
      opacity: 0.9;
    }
    90% {
      width: 300vw;
      height: 300vw;
      opacity: 1;
    }
    100% {
      width: 300vw;
      height: 300vw;
      opacity: 0.9;
    }
  }
</style>
