---
// Components
import BaseLayout from "../layouts/BaseLayout.astro";
import { Image } from "astro:assets";
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import BlogYearSection from "../components/BlogYearSection.astro";

//Assets
import scribble from "../assets/scribbles/loop-down.svg";

const isDev = import.meta.env.PUBLIC_SHOW_DRAFTS;

// Get all blog posts and filter drafts only in production
const allPosts = await getCollection("blog", ({ data }) => {
  return isDev ? true : data.status === "published";
});

// Sort posts by date (newest first)
const sortedPosts = allPosts.sort(
  (a: CollectionEntry<"blog">, b: CollectionEntry<"blog">) =>
    b.data.publishDate.getTime() - a.data.publishDate.getTime(),
);

// Filter notebooks
const notebooks = sortedPosts.filter((post: CollectionEntry<"blog">) =>
  post.data.tags?.includes("notebook"),
);

// Group other posts by year (excluding notebooks)
const postsByYear = sortedPosts
  .filter((post) => !post.data.tags?.includes("notebook"))
  .reduce((acc: Record<number, BlogPost[]>, post: BlogPost) => {
    const year = post.data.publishDate.getFullYear();
    if (!acc[year]) acc[year] = [];
    acc[year].push(post);
    return acc;
  }, {});

type BlogPost = CollectionEntry<"blog">;
---

<BaseLayout
  title="Karina Tovar | Blog"
  description="Blog posts by Karina Tovar"
>
  <section class="neue-container pt-20 pb-10" data-intersection-observer={true}>
    <div class="mx-auto flex flex-col md:flex-row gap-4">
      <div class="flex-1 flex flex-col gap-4">
        <h4>Blog</h4>
        <h1 class="mt-4">Light notes & deep thoughts</h1>
        <p class="md:max-w-xl mt-4 caramel-text text-pretty">
          Collections of thoughts and rants
        </p>
      </div>
      <div
        class="flex-1 md:max-w-md justify-center items-center hidden md:flex">
        <Image
          src={scribble}
          alt="Scribble"
          loading="eager"
          draggable={false}
        />
      </div>
    </div>
  </section>

  <!-- Blog Posts -->
  <div class="max-w-5xl mx-auto px-10 relative flex flex-col-reverse gap-10 mb-20">
    <div
      class="flex flex-col-reverse gap-20"
      data-intersection-observer={true}>
      {
        Object.entries(postsByYear).map(([year, yearPosts]) => {
          const typedPosts = yearPosts as BlogPost[];
          return <BlogYearSection year={year} posts={typedPosts} />;
        })
      }
    </div>

    <div class="flex flex-row relative h-fit min-h-[210px] bg-surface dark:bg-ink-secondary p-8 rounded-xl overflow-hidden transition-transform duration-300 ease-in-out" data-intersection-observer={true}>
      <div class="flex-1 flex flex-col relative">
        <h4 class="mb-5">Notebooks</h4>
        {
          notebooks.map((post: BlogPost) => (
            <a href={`/blog/${post.slug}`} class="block py-5 mb-2 border-b border-border first:pt-0 last:border-b-0 last:pb-0 hover:underline">{post.data.title}</a>
          ))
        }
      </div>
    </div>
  </div>
</BaseLayout>
