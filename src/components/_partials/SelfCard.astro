---
// Assets
import { Image } from "astro:assets";
import karina from "../../assets/brand/self-card.png";
import outline from "../../assets/brand/self-outline.svg";
import bgCard from "../../assets/backgrounds/bg-card.png";
import label from "../../assets/brand/self-label.svg";
import pattern from "../../assets/brand/self-pattern.svg";
import tags from "../../assets/brand/self-tags.svg";
---

<figure class="trading-card">
  <div class="trading-card-tags">
    <Image src={tags} alt="Tags" draggable={false} loading="lazy" decoding="async" />
  </div>
  <div id="tradingCard" class="trading-card-core">
    <div class="card-shine"></div>
    <div class="outline">
      <Image
        src={outline}
        alt="Outline"
        draggable={false}
        loading="lazy"
        decoding="async"
      />
    </div>
    <Image
      class="self"
      src={karina}
      alt="Karina"
      draggable={false}
      loading="lazy"
      decoding="async"
    />
    <div class="trading-card-stats">
      <Image
        src={label}
        alt="Label"
        draggable={false}
        loading="lazy"
        decoding="async"
      />
    </div>
    <div class="pattern">
      <Image
        src={pattern}
        alt="Pattern"
        draggable={false}
        loading="lazy"
        decoding="async"
      />
    </div>
  </div>
  <figcaption>
    Hover over me
  </figcaption>
</figure>

<style define:vars={{ bgCardUrl: `url(${bgCard.src})` }}>
  .trading-card {
    position: relative;
    width: 100%;
    height: 100%;
    min-height: 500px;
    padding: var(--spacing-base);

    display: flex;
    flex-direction: column;
    gap: var(--spacing-small);
    justify-content: center;
    align-items: center;

    figcaption {
      font-size: 10px;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      font-weight: 600;
      opacity: 0.5;
      font-family: var(--font-sans);
    }

    .card-shine {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(
        125deg,
        rgba(255, 255, 255, 0) 0%,
        rgba(255, 255, 255, 0.1) 30%,
        rgba(255, 255, 255, 0.3) 50%,
        rgba(255, 255, 255, 0.1) 70%,
        rgba(255, 255, 255, 0) 100%
      );
      pointer-events: none;
      opacity: 0;
      transition: opacity 0.3s ease;
      z-index: 2;
    }

    .trading-card-tags {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 1;

      display: flex;
      justify-content: center;
      align-items: center;
      pointer-events: none;
      img {
        width: 100%;
        max-width: 524px;
        object-fit: contain;
        height: auto;
        display: block;
        transform: translateY(-9%) translateX(-2%);
      }
    }

    .trading-card-core {
      position: relative;
      width: 100%;
      max-width: 340px;
      height: 450px;
      overflow: hidden;
      border-radius: 160px 160px 0 0;

      display: flex;
      justify-content: center;
      align-items: end;

      transform-style: preserve-3d;
      transform: perspective(1000px);
      transition: all 0.1s ease;

      background-image: var(--bgCardUrl);
      background-repeat: no-repeat;
      background-position: center center;
      background-size: cover;
      filter: drop-shadow(0 0 10px rgba(145, 123, 123, 0.5));
      border: 1px solid var(--color-surface);

      &:hover {
        border: 4px solid var(--color-surface);
        .trading-card-stats {
          bottom: 0;
          opacity: 1;
        }

        .pattern {
          opacity: 0.4;
        }
      }
    }

    .outline,
    .pattern {
      position: absolute;
      bottom: 0;
      left: 0;
      width: 100%;
      height: 100%;

      display: flex;
      justify-content: center;
      align-items: end;
    }

    .pattern {
      mix-blend-mode: color-burn;
      opacity: 0;
      transition: opacity 0.3s ease;
      z-index: 0;
    }

    img {
      width: 100%;
      height: auto;
      margin: 0 auto;
    }

    .self {
      z-index: 1;
      position: relative;
      mix-blend-mode: overlay;
      filter: drop-shadow(0 2px 10px rgba(145, 123, 123, 0.8));
    }

    .trading-card-stats {
      position: absolute;
      bottom: -80px;
      left: 0;
      width: 100%;
      padding: 8px 16px;
      z-index: 2;

      opacity: 0;
      transition: all 0.3s ease;

      display: flex;
      justify-content: center;
      align-items: center;

      img {
        width: 80%;
        height: auto;
      }
    }
  }
</style>

<script>
  const card = document.getElementById("tradingCard");
  const shine = card.querySelector(".card-shine");

  // Constants for the tilt effect
  const MAX_ROTATION = 8;
  const MAX_SHINE_OPACITY = 0.85;

  card.addEventListener("mousemove", (e) => {
    const rect = card.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;

    // Calculate rotation based on mouse position
    const centerX = rect.width / 2;
    const centerY = rect.height / 2;
    const rotateY = ((x - centerX) / centerX) * MAX_ROTATION;
    const rotateX = -((y - centerY) / centerY) * MAX_ROTATION;

    // Apply the rotation
    card.style.transform = `perspective(1000px) rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;

    // Update shine effect
    const percentX = (x / rect.width) * 100;
    const percentY = (y / rect.height) * 100;
    shine.style.opacity = MAX_SHINE_OPACITY;
    shine.style.backgroundPosition = `${percentX}% ${percentY}%`;
  });

  // Reset card when mouse leaves
  card.addEventListener("mouseleave", () => {
    card.style.transform = "perspective(1000px) rotateX(0deg) rotateY(0deg)";
    shine.style.opacity = "0";
  });

  // Handle touch devices
  card.addEventListener("touchmove", (e) => {
    e.preventDefault(); // Prevent scrolling
    const touch = e.touches[0];
    const rect = card.getBoundingClientRect();
    const x = touch.clientX - rect.left;
    const y = touch.clientY - rect.top;

    const centerX = rect.width / 2;
    const centerY = rect.height / 2;
    const rotateY = ((x - centerX) / centerX) * MAX_ROTATION;
    const rotateX = -((y - centerY) / centerY) * MAX_ROTATION;

    card.style.transform = `perspective(1000px) rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;
  });
</script>
