---
import { Image } from "astro:assets";
import closeLine from "../../../assets/icons/close-line.svg";
---

<dialog id="feedback-dialog" class="feedback-dialog p-0 border-0 rounded-lg max-w-[500px] w-[90%] fixed top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 m-0 shadow-lg">
  <form method="dialog" class="feedback-form p-6 m-auto relative">
    <button type="button" class="close-button absolute top-9 right-4 bg-transparent border-0 cursor-pointer" id="close-feedback">
      <Image src={closeLine} alt="Close" />
    </button>
    <div class="form-area flex flex-col gap-4">
      <h3 class="!text-coffee">Share Your Thoughts</h3>

      <div class="form-group font-medium relative mt-4">
        <input 
          type="text" 
          id="name" 
          name="name" 
          autocomplete="off" 
          required 
          placeholder="Your Name"
          class="w-full max-w-full min-w-full h-[52px] min-h-[52px] p-4 border-2 border-transparent outline-none rounded-md font-instrument-sans text-sm font-medium text-ink bg-surface transition-all duration-300 ease-in-out placeholder:text-transparent focus:border-coffee focus:bg-white"
        />
        <label for="name" class="block font-instrument-sans text-sm text-ink-tertiary absolute top-6 left-3 -translate-y-1/2 bg-transparent px-2">Your Name</label>
      </div>
      <div class="form-group font-medium relative">
        <textarea 
          id="feedback-positive" 
          name="feedback_positive" 
          rows="4" 
          required 
          placeholder="What worked well in my telling of this project?"
          class="w-full max-w-full min-w-full h-auto min-h-[40px] max-h-[160px] p-4 border-2 border-transparent outline-none rounded-md font-instrument-sans text-sm font-medium text-ink bg-surface transition-all duration-300 ease-in-out placeholder:text-transparent focus:border-coffee focus:bg-white"
        ></textarea>
        <label for="feedback-positive" class="block font-instrument-sans text-sm text-ink-tertiary absolute top-6 left-3 -translate-y-1/2 bg-transparent px-2">What worked well in my telling of this project?</label>
      </div>
      <div class="form-group font-medium relative">
        <textarea 
          id="feedback-improvement" 
          name="feedback_improvement" 
          rows="4" 
          required 
          placeholder="What could be improved?"
          class="w-full max-w-full min-w-full h-auto min-h-[40px] max-h-[160px] p-4 border-2 border-transparent outline-none rounded-md font-instrument-sans text-sm font-medium text-ink bg-surface transition-all duration-300 ease-in-out placeholder:text-transparent focus:border-coffee focus:bg-white"
        ></textarea>
        <label for="feedback-improvement" class="block font-instrument-sans text-sm text-ink-tertiary absolute top-6 left-3 -translate-y-1/2 bg-transparent px-2">What could be improved?</label>
      </div>

      <input type="hidden" id="page_url" name="page_url" value="" />
      <button type="submit" class="submit-button w-full px-4 py-2 rounded-md font-medium text-paper bg-accent-light cursor-pointer transition-all duration-300 ease-in-out border-0 mb-2 hover:bg-accent focus:bg-accent">Send Feedback</button>
    </div>
    <div class="success-message text-sm font-medium font-instrument-sans text-ink-tertiary mt-2 hidden">
      <p class="text-2xl font-headings text-coffee">Thank you!</p>
      <span>Your feedback is appreciated.</span>
    </div>
  </form>
</dialog>

<style>
  .feedback-dialog::backdrop {
    background-color: rgba(255, 255, 255, 0.5);
    backdrop-filter: blur(4px);
  }

  .form-group label {
    transition: all 0.3s ease-in-out;
  }

  .form-group input:focus ~ label,
  .form-group textarea:focus ~ label,
  .form-group input:not(:placeholder-shown) ~ label,
  .form-group textarea:not(:placeholder-shown) ~ label {
    top: 0;
    transform: translateY(-25%);
    background-color: white;
  }
</style>

<script>
  const dialog = document.getElementById("feedback-dialog") as HTMLDialogElement;
  const feedbackButton = document.getElementById("feedback-button");
  const cancelButton = document.getElementById("close-feedback");
  const feedbackForm = dialog?.querySelector("form");
  const pageUrlInput = document.getElementById("page_url") as HTMLInputElement;

  if (feedbackButton && dialog) {
    feedbackButton.addEventListener("click", () => {
      pageUrlInput.value = window.location.pathname;
      dialog.showModal();
    });
  }

  if (cancelButton) {
    cancelButton.addEventListener("click", () => {
      dialog.close();
    });
  }

  if (feedbackForm) {
    feedbackForm.addEventListener("submit", async (e) => {
      e.preventDefault();

      const formData = new FormData(feedbackForm);
      const payload = {
        name: formData.get("name"),
        feedback_positive: formData.get("feedback_positive"),
        feedback_improvement: formData.get("feedback_improvement"),
        page_url: formData.get("page_url"),
      };

      try {
        const response = await fetch("/api/submit-feedback", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(payload),
        });

        if (!response.ok) {
          const errorData = await response.text();
          throw new Error(`Failed to submit feedback: ${errorData}`);
        }

        const formArea = feedbackForm.querySelector(".form-area");
        const successMessage = feedbackForm.querySelector(".success-message") as HTMLElement;
        if (formArea instanceof HTMLElement && successMessage) {
          formArea.style.display = "none";
          successMessage.style.display = "block";
        }
        setTimeout(() => {
          dialog.close();
        }, 2000);
      } catch (error) {
        alert("Failed to submit feedback. Please try again.");
      }
    });
  }
</script> 