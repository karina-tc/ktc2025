---
// Import BaseLayout
import BaseLayout from "../layouts/BaseLayout.astro";
import Atom from "../components/Atom.astro";

// Import reader utility
import { getReader } from "../utils/reader";

// Import Images
import { Image } from "astro:assets";
import dumpsterFire from "../assets/icons/emojis/dumpster-fire.gif";
import thinkingFace from "../assets/icons/emojis/thinking-face.gif";
import happycat from "../assets/icons/emojis/happy-cat.gif";
import pandaHug from "../assets/icons/emojis/hug.png";
import dumbo from "../assets/icons/emojis/dumbo.gif";

// Import Illustrations
import selfCard from "../assets/brand/karina-profile-min.png";
import plant from "../assets/illustrations/plant.png";
import plantOutline from "../assets/illustrations/plant-outline.svg";

// Get the referrer and reader from URL params
const url = Astro.url;
const referrer = url.searchParams.get("referrer");
const reader = getReader();

// Default greeting if no reader specified
const greeting = reader ? `MY PHILOSOPHY (HI ${reader} ðŸ‘‹)` : "MY PHILOSOPHY";
---

<BaseLayout
  title="Philosophy | Karina Tovar"
  description="My manifesto"
  includeNavigation={false}
  includeFooter={false}
>
  <!-- Manifesto -->
  <div class="manifesto-container" data-referrer={referrer}>
    <!-- Progress Bar -->
    <div class="progress-bar">
      <div class="progress-bar-inner" style="width: 0%;"></div>
    </div>

    <!-- Background -->
    <div class="manifesto-background"></div>

    <!-- Content -->
    <div class="manifesto-content">
      <!-- Facade -->
      <div class="props">
        <Image
          class="facade plant-outline"
          src={plantOutline}
          alt="Plant"
          width={400}
        />
        <Image class="facade plant" src={plant} alt="Plant" width={400} />
        <Image
          class="facade self"
          src={selfCard}
          alt="Karina Tovar"
          width={800}
        />
      </div>

      <!-- Header -->
      <div class="manifesto-header">
        <Atom size="100px" />
        <h4 id="greeting">{greeting}</h4>
        <h1>
          Design and tech are only great if they dream big, solve real shit, and
          leave people smiling.
        </h1>
        <h4>If it doesnâ€™t make life better, whatâ€™s the point?</h4>
        <span class="scroll-down">â†“</span>
      </div>

      <!-- Text -->
      <div class="manifesto-text">
        <section data-section="introduction">
          <p>
            Design is equal parts dreaming and carefully doing. But I always
            start by just playing. Asking the wild what ifs and the <em
              >very real</em
            >: how the hell do we make this work? Or my all time favorite: how
            may this <em>actually be useful?</em>
            <span class="inline-emoji"
              ><Image src={thinkingFace} alt="Thinking face" width={40} /></span
            >
          </p>
          <p>
            My process is all about exploring big ideas without getting lost in
            the cloudsâ€”because at the end of the day, a product needs to work
            and do it <em>well</em>. But it should also <em>feel</em> good. Life
            is chaotic enough that we don't need bad software adding to the s<span
              class="redacted">hi</span
            >t pile. <span class="inline-emoji"
              ><Image src={dumpsterFire} alt="Dumpster fire" width={40} /></span
            >
          </p>
        </section>
        <section data-section="simplicity">
          <p>
            Iâ€™m a big fan of simplicity, clarity, and <em
              >making the complicated feel approachable</em
            >. Whether Iâ€™m turning vendor data into actionable insights,
            building tools to save money on PPC spend, or crafting complex email
            marketing campaigns, I focus on cutting the noise and delivering
            solutions that actually matter. No fluff, no bull<span
              class="redacted">shit</span
            >. Just good design doing its job. <em>My job.</em>
          </p>
          <p>
            I sift through the mess so users donâ€™t have toâ€”so they can close
            their laptops and smile because their day was a good one.
            <span class="inline-emoji"
              ><Image src={happycat} alt="Happy cat" width={40} /></span
            >
          </p>
        </section>
        <section data-section="empathy">
          <p>
            But hereâ€™s the thing: I donâ€™t just design for usabilityâ€”we should
            all just fu<span class="redacted">cki</span>ng do that. I design for
            emotion. A product isnâ€™t just a series of tasks; itâ€™s an experience.
          </p>
          <p>
            I want to know how someone <em class="light">feels</em> when they use
            what Iâ€™ve builtâ€”empowered, delighted, relieved? Maybe I am a weirdo,
            but those are the moments that I chase.
            <span class="inline-emoji"
              ><Image src={pandaHug} alt="Panda hugs" width={40} /></span
            >
          </p>
          <p>
            I call them <em class="light">happiness metrics</em>, and I bake
            them into everything I do.
          </p>
          <div class="atom-container">
            <Atom size="140px" color="#c8a083" />
          </div>
        </section>
        <section data-section="learning">
          <p>
            Iâ€™ve also got a soft spot for <em>always learning</em>. Even when it
            makes me feel incredibly dumb. Every project is a chance to dive
            into something new.
            <span class="inline-emoji"
              ><Image src={dumbo} alt="Dumbo" width={40} /></span
            >
          </p>
          <p>
            Whether itâ€™s experimenting with code, wrapping my head around AI
            systems design, or wrestling with complex finance terminology, I <em
              >embrace the chaos</em
            >
            because thatâ€™s where growth happens.
          </p>
        </section>
        <section data-section="personality">
          <p>
            On the people side, I always bring my whole self to the workâ€”wit,
            bad dad jokes, my sophisticated sailor's mouth, and all. Iâ€™m not
            just here to push pixels; Iâ€™m here to bring the brains, skills,
            memes, and joy that make the process feel human and f<span
              class="redacted">ucki</span
            >ng fun.
          </p>
          <p>
            Itâ€™s this blend that drives me as a self-proclaimed pixel
            philosopher. And as a cautious technologist, I mix strategy,
            empathy, and a touch of irreverence to craft designs that are
            thoughtful and intentionalâ€”but never so serious they lose their
            spark.
          </p>
        </section>
        <section data-section="why-hire-me">
          <h1>
            <a href="mailto:hello@karinatovar.com" target="_blank">Hire me</a> if
            you want to dream big and <em>build bold products</em> that make peopleâ€™s
            days <em>suck less</em>.
          </h1>
          <h4>Oh, one more thing...</h4>
        </section>
        <section data-section="outro">
          <p>
            I donâ€™t just push happy little pixelsâ€”Iâ€™m here to tackle the kind of
            problems that make people groan, swear, or roll their eyes at their
            screens. Itâ€™s not about total perfectionâ€”itâ€™s about human connection
            and empowerment.
          </p>
          <p>
            I work tirelessly for those moments when someone clicks a button,
            finishes a task, and feels like their day just got a little easier.
            So they can go outside, take a nice walk, enjoy the company of
            friends. To just be <em>fucking happy</em>.
          </p>
          <h2>El fin.</h2>
        </section>
      </div>
    </div>

    <!-- Close button -->
    <button class="close-button" aria-label="Close manifesto">
      <span>Close</span>
    </button>
  </div>
</BaseLayout>

<script>
  // Import reader utility
  import { getReader, setReader } from "../utils/reader";

  // Progress bar logic
  const progressBar = document.querySelector('.progress-bar-inner');
  const content = document.querySelector('.manifesto-content');
  const outroSection = document.querySelector('[data-section="outro"]');

  function updateProgressBar() {
    if (!content || !progressBar || !outroSection) return;
    
    const scrollPosition = content.scrollTop;
    const scrollHeight = content.scrollHeight - content.clientHeight;
    const progress = (scrollPosition / scrollHeight) * 100;
    
    // Check if outro section is in view
    const outroRect = outroSection.getBoundingClientRect();
    const isOutroVisible = outroRect.top < window.innerHeight;
    
    // Set to 100% if outro is visible, otherwise calculate normally
    const clampedProgress = isOutroVisible ? 100 : Math.min(100, Math.max(0, progress));
    (progressBar as HTMLElement).style.width = `${clampedProgress}%`;
  }

  // Update progress bar on scroll
  content?.addEventListener('scroll', updateProgressBar);
  
  // Initialize progress bar at 0%
  (progressBar as HTMLElement).style.width = '0%';
  setTimeout(updateProgressBar, 100);

  const urlReader = new URLSearchParams(window.location.search).get("reader");
  if (urlReader) {
    setReader(urlReader);
    const greetingElement = document.getElementById("greeting");
    if (greetingElement) {
      greetingElement.textContent = `MY PHILOSOPHY (HI ${urlReader} ðŸ‘‹)`;
    }
  }

  // Existing close button logic
  const container = document.querySelector(".manifesto-container");
  const closeButton = document.querySelector(".close-button");

  closeButton?.addEventListener("click", () => {
    container?.classList.add("closing");
    // Wait for animation to complete before navigating back
    setTimeout(() => {
      window.location.href = "/";
    }, 500); // Match this with your animation duration
  });

  // Handle back button
  window.addEventListener("popstate", () => {
    container?.classList.add("closing");
  });
</script>

<style lang="scss">
  // Layout & Container
  .manifesto-container {
    width: 100%;
    position: relative;
    inset: 0;
    z-index: 100;
    opacity: 0;
    transform: scale(0);
    animation: expandFromCenter 0.5s cubic-bezier(0.215, 0.61, 0.355, 1)
      forwards;
  }

  .manifesto-background {
    position: fixed;
    inset: 0;
    background-color: var(--color-paper);
    opacity: 0;
    animation: fadeIn 0.5s ease-out 0.2s forwards;
  }

  .manifesto-content {
    position: relative;
    margin: 0 auto;
    padding: var(--spacing-double) 0;
    height: 100vh;
    overflow-y: auto;
    opacity: 0;
    animation: fadeIn 0.3s ease-out 0.4s forwards;
    // Hide scrollbar
    scrollbar-width: none;
    -ms-overflow-style: none;

    // Adds scroll snapping
    scroll-snap-type: y mandatory;
    scroll-behavior: smooth;
  }

  p {
    font-size: clamp(1rem, 2vw, 1.5rem);
    line-height: 1.5;
    font-weight: 400;
    margin: var(--spacing-double) 0;

    em {
      font-weight: 500;
      color: var(--color-ink-tertiary);

      &.light {
        color: var(--color-lime);
      }
    }
  }

  .inline-emoji {
    display: inline-block;
    margin: 0 4px;
    vertical-align: middle;
    margin-top: -0.2em;
  }

  // Header
  .manifesto-header {
    width: 100%;
    height: 100vh;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: start;
    padding-top: 80px;
    gap: var(--spacing-base);

    // Add scroll snapping to header
    scroll-snap-align: start;
    scroll-snap-stop: always;

    h4 {
      font-size: clamp(0.7rem, 2vw, 0.9rem);
      font-weight: 600;
      color: var(--color-ink-tertiary);
      font-family: var(--font-sans);
      text-transform: uppercase;
      text-align: center;
      max-width: min(720px, 90vw);
      letter-spacing: 0.1em;
      line-height: 2;
      margin: var(--spacing-small) auto;

      &:last-of-type {
        margin-top: var(--spacing-double);
      }
    }

    h1 {
      font-size: clamp(3rem, 8vw, 5.25rem);
      line-height: 0.95;
      max-width: min(720px, 90vw);
      margin: 0 auto;
      text-align: center;
    }

    .scroll-down {
      font-size: 40px;
      font-weight: 600;
      color: var(--color-coffee);
      font-family: var(--font-sans);
      text-transform: uppercase;
      letter-spacing: 0.1em;
      margin: -2rem auto var(--spacing-base);
    }

    @include tablet {
      padding: 80px var(--spacing-double) var(--spacing-double);
    }
  }

  // Content Sections
  .manifesto-text {
    width: 100%;
    z-index: 10;

    section {
      width: 100%;
      height: 100vh;
      display: flex;
      flex-direction: column;
      justify-content: center;
      position: relative;
      scroll-snap-align: start;
      scroll-snap-stop: always;

      &[data-section="introduction"] {
        background-color: var(--color-surface);
      }
      &[data-section="simplicity"] {
        background-color: var(--color-paper);
      }
      &[data-section="empathy"] {
        color: var(--color-paper);
        background-color: var(--color-chocolate);
        z-index: 10;

        em {
          color: var(--color-chocolate-light);
        }

        .redacted {
          color: var(--color-chocolate-light);
        }
        .redacted::before {
          color: var(--color-chocolate);
        }
        .redacted::after {
          background-color: var(--color-chocolate-light);
        }

        .atom-container {
          position: absolute;
          top: 8%;
          width: 100%;
          display: flex;
          justify-content: center;
          align-items: center;
          z-index: -1;
          opacity: 0.75;

          @include tablet {
            max-width: 240px;
            scale: 0.75;
          }

          @include mobile {
            display: none;
          }
        }
      }
      &[data-section="learning"] {
        background-color: var(--color-paper);
      }
      &[data-section="personality"] {
        background-color: var(--color-surface);
      }
      &[data-section="why-hire-me"] {
        z-index: 10;
        color: var(--color-paper);
        background-color: var(--color-chocolate);
        h1 {
          font-size: clamp(3rem, 8vw, 4rem);
          line-height: 0.9;
          a {
            text-decoration: underline;
            text-decoration-color: var(--color-chocolate-light);
            text-decoration-thickness: 6px;
            text-underline-offset: 8px;
            text-decoration-style: dashed;
            transition: all 0.3s ease-in-out;
            &:hover {
              color: var(--color-chocolate-light);
              text-decoration-color: var(--color-paper);
            }
          }
          em {
            color: var(--color-chocolate-light);
          }
        }
      }
      &[data-section="outro"] {
        h2 {
          width: 100%;
          text-align: left;
          font-size: clamp(2rem, 8vw, 3rem);
          line-height: 1.2;
          font-family: var(--font-serif);
          color: var(--color-coffee);
          opacity: 0.75;
        }
      }

      p,
      h1,
      h2,
      h4 {
        max-width: 720px;
        margin-left: auto;
        margin-right: auto;
      }

      h4 {
        width: 100%;
        text-align: left;
        font-size: clamp(0.7rem, 2vw, 0.9rem);
        font-weight: 600;
        color: var(--color-coffee);
        font-family: var(--font-sans);
        text-transform: uppercase;
        letter-spacing: 0.1em;
        line-height: 2;
        margin: var(--spacing-double) auto 0;
      }

      p {
        margin-top: var(--spacing-small);
      }

      &:first-of-type {
        p:first-of-type::first-letter {
          float: left;
          font-size: clamp(3rem, 8vw, 4.5rem);
          line-height: 0.8;
          margin: 0.2em 0.1em 0 0;
          font-family: var(--font-serif);
          color: var(--color-ink-tertiary);
        }
      }

      @include tablet {
        padding: var(--spacing-double);
      }
    }
  }

  // UI Elements
  .close-button {
    position: fixed;
    top: var(--spacing-base);
    right: var(--spacing-base);
    color: var(--color-ink-tertiary);
    text-decoration: underline;
    text-decoration-color: var(--color-ink-tertiary);
    text-underline-offset: 4px;
    text-decoration-thickness: 1px;
    padding: var(--spacing-small) var(--spacing-base);
    background: rgba(255, 255, 255, 0.7);
    backdrop-filter: blur(10px);
    border-radius: 40px;
    cursor: pointer;
    transition: all 0.3s ease-in-out;
    &:hover {
      background: rgba(255, 255, 255, 1);
      color: var(--color-ink);
      text-decoration-color: var(--color-ink);
    }
  }

  // Props & Decorative Elements
  .props {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    z-index: 1;
    pointer-events: none;

    .facade {
      position: absolute;

      &.plant-outline,
      &.plant {
        width: auto;
        height: 500px;
        top: calc(100vh - 500px);
        left: -2vw;
        filter: grayscale(100%);

        @include tablet {
          left: -5vw;
          opacity: 0.2;
        }
      }

      &.plant-outline {
        z-index: 1;
      }

      &.self {
        width: auto;
        height: 650px;
        top: calc(100vh - 650px);
        right: -425px;
        z-index: 1;
        filter: grayscale(100%);
        opacity: 0.75;

        @include tablet {
          right: -55vw;
          opacity: 0.2;
        }
      }
    }

    @include mobile {
      display: none;
    }
  }

  // Animations
  @keyframes expandFromCenter {
    from {
      opacity: 0;
      transform: scale(0);
      clip-path: circle(0% at center);
    }
    to {
      opacity: 1;
      transform: scale(1);
      clip-path: circle(150% at center);
    }
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  // Closing States
  .manifesto-container.closing {
    animation: collapseToCenter 0.5s cubic-bezier(0.215, 0.61, 0.355, 1)
      forwards;

    .manifesto-background {
      animation: fadeOut 0.3s ease-out forwards;
    }

    .manifesto-content {
      animation: fadeOut 0.3s ease-out forwards;
    }
  }

  @keyframes collapseToCenter {
    from {
      opacity: 1;
      transform: scale(1);
      clip-path: circle(150% at center);
    }
    to {
      opacity: 0;
      transform: scale(0);
      clip-path: circle(0% at center);
    }
  }

  @keyframes fadeOut {
    from {
      opacity: 1;
    }
    to {
      opacity: 0;
    }
  }

  // Special Effects
  .redacted {
    cursor: pointer;
    position: relative;

    &::before {
      content: "***********";
      position: absolute;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      max-height: 28px;
      color: var(--color-ink);
      z-index: 1;
      overflow: hidden;
      transition: all 0.4s ease-in-out;
    }

    &::after {
      content: "";
      position: absolute;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      max-height: 28px;
      background-color: var(--color-coffee);
      transition: all 0.4s ease-in-out;
    }

    &:hover {
      color: var(--color-ink-tertiary);
      &::before {
        opacity: 0;
        top: 20%;
        transition: none;
      }
      &::after {
        opacity: 0;
      }
    }
  }

  // Progress Bar
  .progress-bar {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 4px;
    background-color: transparent;
    z-index: 100;
    animation: progressBar 2s ease-in-out forwards;


    .progress-bar-inner {
      position: absolute;
      top: 0;
      left: 0;
      width: 0px;
      height: 100%;
      background-color: var(--color-coffee);
    }
  }

  @keyframes progressBar {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
</style>


