---
import { Image } from "astro:assets";

interface Props {
  src: ImageMetadata;
  size?: number;
  popoverSize?: number;
}

const { src, size = 72, popoverSize = 400 } = Astro.props;
---

<div class="qr-wrapper">
  <button
    class="qr-code"
    popovertarget="qr-popover"
    aria-label="Enlarge QR Code"
  >
    <Image
      src={src}
      alt="QR Code"
      width={size}
      height={size}
      draggable={false}
    />
  </button>
  <div id="qr-popover" popover="auto" class="qr-popover">
    <Image
      src={src}
      alt="QR Code"
      width={popoverSize}
      height={popoverSize}
      draggable={false}
    />
  </div>
</div>

<style lang="scss">
  @import "../styles/base/_breakpoints.scss";

  // Base container
  .qr-wrapper {
    width: 72px;
    height: 72px;
    position: relative;
  }

  // QR Code Button
  .qr-code {
    width: 100%;
    height: 100%;
    padding: 8px;
    background-color: var(--color-paper);
    border-radius: 12px;
    overflow: hidden;
    transition: all 0.2s ease-in-out;
    position: relative;
    cursor: pointer;
    border-radius: 12px;
    box-shadow: 0 0 8px rgba(94, 78, 78, 0.25);
    border: none;
    transition: all 0.2s ease-in-out;

    &:focus {
      outline: var(--color-coffee) 1px solid;
    }

    &:hover {
      transform: scale(1.1);
    }

    img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }

    &[popovertoggletarget="qr-popover"][aria-expanded="true"] {
      opacity: 0;
    }
  }

  // Popover Dialog
  .qr-popover {
    width: 400px;
    height: 400px;
    display: flex;
    justify-content: center;
    align-items: center;
    margin: auto;
    padding: var(--spacing-small);
    background: var(--color-paper);
    border-radius: 12px;
    border-color: white;
    box-shadow: 0 0 20px rgba(94, 78, 78, 0.5);
    overflow: visible;
    animation: popover-show 0.3s ease-out;

    &::after {
      content: "ESC TO CLOSE";
      position: absolute;
      display: flex;
      justify-content: center;
      align-items: center;
      width: 100%;
      bottom: -40px;
      font-size: var(--font-size-small);
      font-family: var(--font-sans);
      font-weight: 700;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      cursor: pointer;
      color: var(--color-coffee);

      @include tablet {
        content: "CLICK TO CLOSE";
      }
    }

    &::backdrop {
      background: rgba(255, 255, 255, 0.25);
      backdrop-filter: blur(20px);
    }

    &:not(:popover-open) {
      display: none;
    }
  }

  // Animation
  @keyframes popover-show {
    from {
      transform: scale(0.2);
      opacity: 0;
    }
    to {
      transform: scale(1);
      opacity: 1;
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const qrButton = document.querySelector(".qr-code") as HTMLButtonElement;
    const qrPopover = document.getElementById("qr-popover") as HTMLElement;

    // Close popover when clicking outside or on the popover itself
    qrPopover?.addEventListener("click", (e) => {
      if (e.target === qrPopover) {
        qrPopover.hidePopover();
      }
    });

    // Close popover with Escape key
    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape" && qrPopover?.matches(":popover-open")) {
        qrPopover.hidePopover();
      }
    });

    // Handle backdrop clicks and state changes
    qrPopover?.addEventListener("beforetoggle", (e: Event) => {
      const event = e as ToggleEvent;
      if (event.newState === "closed") {
        qrButton.style.opacity = "1";
      } else {
        qrButton.style.opacity = "0";
      }
    });
  });
</script>

