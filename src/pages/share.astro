---
// Components
import BaseLayout from "../layouts/BaseLayout.astro";
import Atom from "../components/Atom.astro";
import SelfCard from "../components/_partials/SelfCard.astro";
import DetailsSection from "../components/_partials/DetailsSection.astro";
import QrCode from "../components/QrCode.astro";

// Utils
import { personalInfo } from "../data/metadata";

// Assets
import qrCode from "../assets/brand/qr-code-transparent.png";

// Get the referrer and reader from URL params
const url = Astro.url;
const referrer = url.searchParams.get("referrer");
const reader = url.searchParams.get("reader");

// Default greeting if no reader specified
const greeting = reader ? `${reader}` : "friend";

// Import all backgrounds in one line using an array
const backgrounds = await Promise.all(
  [...Array(4)].map(
    (_, i) =>
      import(`../assets/backgrounds/bg${String(i + 1).padStart(2, "0")}.png`),
  ),
).then((modules) => modules.map((m) => m.default));

const selectedBg =
  backgrounds[Math.floor(Math.random() * backgrounds.length)].src;

// For debugging
console.log("Selected background:", selectedBg);

const socialLinks = [
  { type: "button", text: "Share", action: "share" },
  {
    type: "link",
    text: "LinkedIn",
    href: personalInfo.social.linkedin.url,
  },
  { type: "link", text: "GitHub", href: personalInfo.social.github.url },
];
---

<BaseLayout
  title="Share | Karina Tovar"
  description="Karina Tovar - Lead Product Designer"
  includeNavigation={false}
  includeFooter={false}
>
  <div class="main-wrapper">
    <div class="content-wrapper">
      <!-- Left Column -->
      <div class="col-left">
        <div class="greeting">
          <Atom />
          <h4>Karina Tovar</h4>
          <h1 id="greeting">Hello {greeting}</h1>
        </div>
        <SelfCard
          showTags={false}
          showDetails={false}
          defaultActive={true}
          forceActive={true}
        />
      </div>

      <!-- Right Column -->
      <div class="col-right">
        <DetailsSection reader={reader} />
        <div class="share-section">
          <QrCode src={qrCode} />
          {
            socialLinks.map((link) =>
              link.type === "button" ? (
                <button>{link.text}</button>
              ) : (
                <a href={link.href} target="_blank" rel="noopener noreferrer">
                  {link.text}
                </a>
              ),
            )
          }
        </div>
      </div>
    </div>
  </div>
</BaseLayout>

<script>
  // Import reader utility
  import { getReader, setReader } from "../utils/reader";

  const urlReader = new URLSearchParams(window.location.search).get("reader");
  if (urlReader) {
    setReader(urlReader);
    const greetingElement = document.getElementById("greeting");
    if (greetingElement) {
      greetingElement.textContent = `Hello ${urlReader}`;
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
    const qrButton = document.querySelector(".qr-code") as HTMLButtonElement;
    const qrPopover = document.getElementById("qr-popover") as HTMLElement;

    // Close popover when clicking outside or on the popover itself
    qrPopover?.addEventListener("click", (e) => {
      if (e.target === qrPopover) {
        qrPopover.hidePopover();
      }
    });

    // Close popover with Escape key
    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape" && qrPopover?.matches(":popover-open")) {
        qrPopover.hidePopover();
      }
    });

    // Handle backdrop clicks and state changes
    qrPopover?.addEventListener("beforetoggle", (e: Event) => {
      const event = e as ToggleEvent;
      if (event.newState === "closed") {
        qrButton.style.opacity = "1";
      } else {
        qrButton.style.opacity = "0";
      }
    });

    // Target the Share button by finding the button with text "Share"
    const shareButton = Array.from(
      document.querySelectorAll(".share-section button"),
    ).find((button) => button.textContent === "Share");

    if (shareButton) {
      shareButton.addEventListener("click", async () => {
        const currentUrl = window.location.href;
        try {
          await navigator.clipboard.writeText(currentUrl);
          shareButton.textContent = "Copied!";
          setTimeout(() => {
            shareButton.textContent = "Share";
          }, 2000);
        } catch (err) {
          alert("Failed to copy URL");
        }
      });
    }
  });
</script>

<style lang="scss" define:vars={{ backgroundUrl: `url(${selectedBg})` }}>
  // Breakpoint mixins
  @import "../styles/base/_breakpoints.scss";

  .main-wrapper {
    min-height: 100vh;
    background-image: var(--backgroundUrl);
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    background-color: #f0f0f0;
  }

  .content-wrapper {
    // Grid Layout
    display: grid;
    grid-template-columns: minmax(auto, 480px) minmax(auto, 420px);
    gap: var(--spacing-base);
    align-items: center;
    justify-content: center;

    // Sizing
    width: 100%;
    max-width: 1440px;
    min-height: 100vh;
    margin: 0 auto;
    padding: var(--spacing-double) var(--spacing-base) var(--spacing-quad);

    // Visual
    background-color: var(--color-paper);
    box-shadow: 0 0 20px rgba(114, 93, 93, 0.5);

    // Column styles
    .col-left {
      display: grid;
      grid-template-rows: auto 1fr;
      gap: var(--spacing-base);
      align-self: start;
      justify-self: start;

      .greeting {
        display: grid;
        gap: var(--spacing-small);

        h4 {
          font-family: var(--font-sans);
          font-size: var(--font-size-small);
          font-weight: 600;
          color: var(--color-coffee);
          text-transform: uppercase;
          letter-spacing: 0.1em;
          margin: var(--spacing-base) 0 12px;
        }
      }
    }

    .col-right {
      display: grid;
      grid-template-rows: 1fr auto;
      gap: var(--spacing-double);
      align-self: start;

      // Share container
      .share-section {
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;
        gap: var(--spacing-base);
      }
    }

    // Global component styles
    :global(.trading-card) {
      padding: 0;
      max-width: 420px;
    }
    :global(.subtitle) {
      margin-top: 10px;
      font-family: var(--font-headings);
    }
  }

  // Responsive styles
  @include desktop-reverse {
    .col-right {
      margin-top: 250px;
    }
  }
  @media screen and (max-width: 1024px) {
    .content-wrapper {
      gap: 0;
      grid-template-columns: minmax(auto, 420px) minmax(auto, 420px);
    }
  }
  @media (max-width: 880px) {
    .content-wrapper {
      grid-template-columns: 1fr;
      grid-template-rows: auto auto;
      padding: var(--spacing-base);
      gap: var(--spacing-base);

      .col-left,
      .col-right {
        max-width: 360px;
        margin: 0 auto;
        width: 100%;
      }
      .col-right {
        aside {
          .detail {
            font-size: var(--font-size-xxs);
          }
        }
      }
    }
  }

  @keyframes popover-show {
    from {
      transform: scale(0.2);
      opacity: 0;
    }
    to {
      transform: scale(1);
      opacity: 1;
    }
  }
</style>
