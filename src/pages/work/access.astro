---
// Layouts
import BaseLayout from "../../layouts/BaseLayout.astro";

// Components
import Divider from "../../components/Divider.astro";
import Atom from "../../components/Atom.astro";
---

<BaseLayout
  title="Karina Tovar - Access"
  description="Karina Tovar is a Lead Product Designer."
  includeNavigation={false}
  includeFooter={false}
>
  <div class="section-container">
    <a href="/"><Atom size="140px" /></a>
    <h1>Access Required</h1>
    <form class="form-group">
      <input
        type="text"
        name="password"
        placeholder="knock-knock"
        autocomplete="off"
        required
      />
      <button class="button" type="submit">Submit</button>
      <div class="error-message" role="alert"></div>
    </form>

    <a class="action-link take-me-back" id="backButton" href="/">Take me back</a
    >
  </div>
</BaseLayout>

<script>
  const form = document.querySelector("form");
  const errorMessage = document.querySelector(".error-message");
  const input = document.querySelector('input[name="password"]');

  form?.addEventListener("submit", async (e) => {
    e.preventDefault();
    const formData = new FormData(e.target as HTMLFormElement);
    const password = formData.get("password")?.toString().trim();

    try {
      // Clear any existing error states
      if (errorMessage) {
        errorMessage.textContent = "";
        errorMessage.classList.remove("visible");
      }
      if (input) {
        input.classList.remove("error");
      }

      const response = await fetch("/api/validate-password", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ password }),
        credentials: "same-origin",
      });

      const result = await response.json();

      if (!result.valid) {
        if (errorMessage) {
          errorMessage.textContent = result.message;
          errorMessage.classList.add("visible");
        }
        if (input) {
          input.classList.add("error");
        }
        return;
      }

      // Valid password, redirect
      const params = new URLSearchParams(window.location.search);
      const redirectUrl = params.get("redirect") || "/work";
      window.location.replace(redirectUrl);
    } catch (error) {
      if (errorMessage) {
        errorMessage.textContent =
          "Error validating password. Please try again.";
        errorMessage.classList.add("visible");
      }
      if (input) {
        input.classList.add("error");
      }
    }
  });
</script>

<style lang="scss">
  .take-me-back {
    margin-top: var(--spacing-quad);
  }

  .section-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100vh;
    padding: var(--spacing-quad);
    text-align: center;

    :global(h1) {
      font-size: clamp(2rem, 5vw, 3rem);
      margin: var(--spacing-double) 0 var(--spacing-base);
    }

    .form-group {
      width: 100%;
      max-width: 300px;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      gap: var(--spacing-small);
      text-align: center;
      margin: var(--spacing-base) auto 0;

      input {
        width: 100%;
        max-width: 300px;
        padding: var(--spacing-base);
        border: 0;
        border-bottom: 1px solid var(--color-coffee);
        background-color: var(--color-surface);
        color: var(--color-ink);
        font-size: var(--font-size-large);
        text-align: center;
        font-family: var(--font-mono);
        letter-spacing: 0.05em;
        text-transform: uppercase;
        color: var(--color-ink-secondary);
        outline: none;
        transition: all 0.3s ease-in-out;

        &::placeholder {
          color: var(--color-ink-tertiary);
        }

        &:focus {
          border-width: 2px;
        }

        &.error {
          border-color: var(--color-accent);
          border-width: 2px;
          background-color: #fbdfb6;
        }
      }

      .error-message {
        color: var(--color-ink-tertiary);
        font-size: var(--font-size-small);
        font-family: var(--font-sans);
        font-weight: 600;
        opacity: 0;
        transition: all 0.3s ease-in-out;

        &.visible {
          opacity: 1;
          margin: var(--spacing-xsmall) 0 var(--spacing-small);
        }
      }

      .button {
        width: 100%;
        padding: var(--spacing-small) var(--spacing-base);
        border: 0;
        background-color: var(--color-accent);
        color: var(--color-surface);
        font-size: var(--font-size-huge);
        font-family: var(--font-headings);
        border-radius: var(--border-radius-base);
        cursor: pointer;
        transition: all 0.3s ease-in-out;

        &:hover {
          background-color: var(--color-accent-light);
        }

        &:active {
          background-color: var(--color-accent);
        }
      }
    }
  }
</style>
