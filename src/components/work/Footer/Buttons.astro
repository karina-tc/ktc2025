---
import { Image } from "astro:assets";
import heartSolid from "../../../assets/icons/heart-solid.svg";
import heartLine from "../../../assets/icons/heart-line.svg";
import messageBubbleLine from "../../../assets/icons/message-bubble-line.svg";
import messageBubbleSolid from "../../../assets/icons/message-bubble-solid.svg";
---

<div class="work-footer-buttons flex gap-4 relative z-[45]">
  <button 
    id="love-button" 
    class="flex items-center gap-2 text-base relative p-2 md:p-0 cursor-pointer touch-manipulation"
  >
    <div class="icon-container heart relative w-6 h-6 origin-center">
      <Image class="heart-line absolute left-0 transition-opacity duration-300 ease-in-out" src={heartLine} alt="Heart" />
      <Image class="heart-solid absolute left-0 transition-opacity duration-300 ease-in-out opacity-0" src={heartSolid} alt="Heart" />
    </div>
    <span class="border-b border-dotted border-[--color-ink-tertiary] transition-all duration-300 ease-in-out hover:border-[--color-accent]">Show some love</span>
  </button>
  <button 
    id="feedback-button" 
    class="flex items-center gap-2 text-base relative p-2 md:p-0 cursor-pointer touch-manipulation max-md:hidden"
  >
    <div class="icon-container message-bubble relative w-6 h-6 origin-center">
      <Image class="message-bubble-line absolute left-0 transition-opacity duration-300 ease-in-out" src={messageBubbleLine} alt="Message Bubble" />
      <Image class="message-bubble-solid absolute left-0 transition-opacity duration-300 ease-in-out opacity-0" src={messageBubbleSolid} alt="Message Bubble" />
    </div>
    <span class="border-b border-dotted border-[--color-ink-tertiary] transition-all duration-300 ease-in-out hover:border-[--color-accent]">Leave some feedback</span>
  </button>
</div>

<script>
  const loveButton = document.getElementById("love-button");

  if (loveButton) {
    loveButton.addEventListener("click", async (event) => {
      try {
        const heartLine = loveButton.querySelector(".heart-line") as HTMLElement;
        const heartSolid = loveButton.querySelector(".heart-solid") as HTMLElement;
        const heartContainer = loveButton.querySelector(".icon-container.heart") as HTMLElement;
        
        if (heartLine && heartSolid && heartContainer) {
          heartLine.style.opacity = "0";
          heartSolid.style.opacity = "1";
          heartContainer.style.animation = "heartBounce 0.5s cubic-bezier(0.17, 0.89, 0.32, 1.49)";
          
          heartContainer.addEventListener("animationend", () => {
            heartContainer.style.animation = "";
          }, { once: true });

          setTimeout(() => {
            heartLine.style.cssText = "opacity: 1";
            heartSolid.style.cssText = "opacity: 0";
          }, 2000);
        }

        await fetch("/api/record-love", {
          method: "POST",
          mode: "no-cors",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            page_path: window.location.pathname,
          }),
        });
      } catch (error) {
        console.error("Error:", error);
      }
    });
  }
</script>

<style>
  @keyframes heartBounce {
    0% { transform: scale(1); }
    50% { transform: scale(1.4); }
    100% { transform: scale(1); }
  }

  /* Keep these hover states in CSS as they're more complex to handle in Tailwind */
  button:hover .heart-line,
  button:hover .message-bubble-line {
    opacity: 0;
  }
  
  button:hover .heart-solid,
  button:hover .message-bubble-solid {
    opacity: 1;
  }

  @media (max-width: 768px) {
    button:active .heart-line,
    button:active .message-bubble-line {
      opacity: 0;
    }
    
    button:active .heart-solid,
    button:active .message-bubble-solid {
      opacity: 1;
    }
  }

  /* Ensure the buttons themselves can receive events */
  .work-footer-buttons {
    pointer-events: all;
  }
</style> 