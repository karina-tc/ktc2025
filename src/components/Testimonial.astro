---
import { Image } from "astro:assets";

// Icons
import Bookmark from "../assets/icons/bookmark.svg";
import Briefcase from "../assets/icons/briefcase.svg";
import CaretLeft from "../assets/icons/caretleft.svg";
import CaretRight from "../assets/icons/caretright.svg";

// Types
interface Props {
  include_classes?: string;
  quote: {
    title: string;
    content: string;
  };
  author: {
    name: string;
    image: ImageMetadata;
    currentRole: string;
    pastRole: string;
    pastCompany: string;
  };
  reference: {
    number: string;
    link?: string;
  };
  "data-index"?: number;
  totalTestimonials?: number;
  allTestimonials: Array<{
    quote: { title: string; content: string };
    author: {
      name: string;
      image: ImageMetadata;
      currentRole: string;
      pastRole: string;
      pastCompany: string;
    };
    reference: { number: string; link?: string };
  }>;
}

// Generate special ability based on quote title
const getSpecialAbility = (title: string) => {
  const abilities: { [key: string]: string } = {
    "Strategic Builder": "PM SHAPESHIFTING",
    "Can Do it All": "ULTRA ADAPTABILITY",
    "Super Fast": "SPEED MASTERY",
    "Deep Understanding": "USER INSIGHT",
    "Technical Prowess": "CODE WIZARDRY",
    "Action Oriented": "RAPID EXECUTION",
  };
  return abilities[title] || "SUPER POWER";
};

const {
  quote,
  author,
  reference,
  include_classes = "",
  "data-index": index,
  totalTestimonials = 1,
  allTestimonials,
} = Astro.props;
---

<div class:list={[
  "testimonial-item group flex flex-col text-ink-secondary bg-surface border-6 border-paper rounded-xl transition-all duration-300 ease-[cubic-bezier(0.19,1,0.22,1)] overflow-hidden relative shadow-[0px_52px_20px_-40px_rgba(84,67,57,0.25)] hover:shadow-[0px_52px_20px_-40px_rgba(84,67,57,0.5)]",
  "lg:active:block lg:[&:not(.active)]:hidden",
  include_classes
]} data-index={index}>
  <!-- Header -->
  <div class="testimonial-header flex flex-col px-4 md:px-8 pt-4 border-b border-dashed border-coffee transition-all duration-300">
    <div class="testimonial-reference flex justify-between items-center text-sm font-mono [backface-visibility:hidden]">
      <span class="uppercase tracking-widest font-extrabold opacity-75 transition-all duration-200 group-hover:text-coffee group-hover:opacity-100">{reference.number}</span>
      {
        reference.link && (
          <a href={reference.link} 
             class="font-medium p-2 uppercase underline-offset-4 hover:underline hover:decoration-inherit hover:underline-offset-2" 
             target="_blank" 
             rel="noopener noreferrer">
            View
          </a>
        )
      }
    </div>

    <div class="testimonial-title flex-grow flex flex-col [backface-visibility:hidden]">
      <h2 class="font-instrument-serif !text-4xl text-coffee mb-4 pb-2 transition-all duration-300 opacity-0">{quote.title}</h2>
    </div>
  </div>

  <div class="testimonial-holes flex justify-between items-center overflow-hidden absolute w-[calc(100%+40px)] -left-6 top-24 max-md:hidden">
    <div class="testimonial-hole w-10 h-10 rounded-full bg-paper"></div>
    <div class="testimonial-hole w-10 h-10 rounded-full bg-paper"></div>
  </div>

  <div class="testimonial-quote flex-grow flex gap-4 flex-col p-4 md:px-8 opacity-0 transition-all duration-300">
    <p class="mt-2">{quote.content}</p>
    <div class="testimonial-author flex items-start md:items-center py-2 gap-2 md:gap-4 md:flex-row flex-col">
      <div class="testimonial-author-image rounded-[32px] w-[100px] h-[100px] min-w-[100px] min-h-[100px] overflow-hidden border-2 border-white bg-[url('../assets/backgrounds/bg02.png')] bg-center bg-no-repeat bg-[100px] shadow-md">
        <Image src={author.image} alt={author.name} width={100} height={100} class="w-full h-full object-cover pointer-events-none" />
      </div>
      <div class="testimonial-author-info flex flex-col">
        <p class="font-medium m-0">{author.name}</p>
        <span class="testimonial-author-role inline-block w-full -mt-1 overflow-hidden relative text-sm">
          <p class="m-0 text-ink-tertiary transition-all duration-200 relative top-0 bg-inherit group-hover:opacity-0 group-hover:absolute group-hover:-top-10">{author.currentRole}</p>
          <p class="m-0 text-ink-tertiary transition-all duration-200 absolute top-[10px] left-0 opacity-0 group-hover:opacity-100 group-hover:relative group-hover:top-0">{author.pastRole}</p>
        </span>
      </div>
    </div>
  </div>

  <div class="testimonial-special-ability flex flex-row max-md:flex-col items-center text-sm font-mono text-ink-tertiary font-medium uppercase tracking-widest mt-4 -mb-0.5 md:-mb-1.5 border-t border-border bg-paper transition-all duration-200">
    <div class="block inline-flex items-center justify-start gap-2 py-3 px-5 border-r max-md:border-r-0 max-md:border-b border-border flex-grow max-md:w-full">
      <Image src={Bookmark} alt="Bookmark" width={20} height={20} draggable={false} loading="lazy" />
      SUPERPOWER: {getSpecialAbility(quote.title)}
    </div>
    <div class="block inline-flex items-center justify-start gap-2 py-3 px-5 border-r max-md:border-r-0 max-md:border-b border-border flex-grow max-md:w-full">
      <Image src={Briefcase} alt="Briefcase" width={20} height={20} draggable={false} loading="lazy" />
      <a href="/resume" target="_blank" class="underline underline-offset-4 decoration-coffee hover:decoration-accent">{author.pastCompany}</a>
    </div>
    <button type="button" aria-label="Previous" class="block arrow left py-3 px-3 text-center cursor-pointer transition-colors duration-200 hover:bg-border max-md:hidden">
      <Image src={CaretLeft} alt="Caret Left" width={20} height={20} draggable={false} loading="lazy" />
    </button>
    <button type="button" aria-label="Next" class="block arrow right py-3 px-3 text-center cursor-pointer transition-colors duration-200 hover:bg-border max-md:hidden">
      <Image src={CaretRight} alt="Caret Right" width={20} height={20} draggable={false} loading="lazy" />
    </button>
  </div>
</div>

<script define:vars={{ allTestimonials }}>
  class TestimonialCarousel {
    constructor() {
      this.currentIndex = 0;
      this.card = document.querySelector(".testimonial-item");
      this.testimonials = allTestimonials;

      const prevButton = this.card?.querySelector(".arrow.left");
      const nextButton = this.card?.querySelector(".arrow.right");

      prevButton?.addEventListener("click", () => this.navigate("prev"));
      nextButton?.addEventListener("click", () => this.navigate("next"));
    }

    navigate(direction) {
      if (!this.card) return;

      // Remove flip class first
      this.card.classList.remove("flip");

      // Add flip class back
      setTimeout(() => {
        this.card.classList.add("flip");
      }, 400);

      // Update content after small delay
      setTimeout(() => {
        this.currentIndex =
          direction === "next"
            ? (this.currentIndex + 1) % this.testimonials.length
            : (this.currentIndex - 1 + this.testimonials.length) %
              this.testimonials.length;

        const nextTestimonial = this.testimonials[this.currentIndex];
        this.updateContent(nextTestimonial);
      }, 300);
    }

    updateContent(testimonial) {
      if (!this.card) return;

      // Update reference
      const reference = this.card.querySelector(".testimonial-reference");
      if (reference) {
        reference.querySelector("span").textContent =
          testimonial.reference.number;
        const link = reference.querySelector("a");
        if (link && testimonial.reference.link) {
          link.href = testimonial.reference.link;
        }
      }

      // Update title with typing effect
      const title = this.card.querySelector(".testimonial-title h2");
      if (title) {
        // Split the new title text into spans
        const chars = testimonial.quote.title.split("").map((char) => {
          const span = document.createElement("span");
          span.className = "char opacity-20";
          span.textContent = char;
          return span;
        });

        // Clear existing content and add new spans
        title.textContent = "";
        chars.forEach((span) => title.appendChild(span));

        // Animate each character
        let currentChar = 0;
        const totalChars = chars.length;
        const speed = 75;

        function revealNextChar() {
          if (currentChar < totalChars) {
            chars[currentChar].className = "char opacity-100 !text-coffee";
            currentChar++;
            setTimeout(revealNextChar, speed);
          }
        }

        // Start the typing animation
        revealNextChar();
      }

      // Update quote
      const quote = this.card.querySelector(".testimonial-quote > p");
      if (quote) {
        quote.textContent = testimonial.quote.content;
      }

      // Update author
      const authorName = this.card.querySelector(
        ".testimonial-author-info > p",
      );
      const authorImage = this.card.querySelector(".testimonial-author img");
      const authorCurrentRole = this.card.querySelector(
        ".testimonial-author-role p:first-child",
      );
      const authorPastRole = this.card.querySelector(
        ".testimonial-author-role p:last-child",
      );

      if (authorName) authorName.textContent = testimonial.author.name;
      if (authorImage) authorImage.src = testimonial.author.image.src;
      if (authorCurrentRole)
        authorCurrentRole.textContent = testimonial.author.currentRole;
      if (authorPastRole)
        authorPastRole.textContent = testimonial.author.pastRole;

      // Update special ability
      const superpower = this.card.querySelector(
        ".testimonial-special-ability .block:first-child",
      );
      const pastCompany = this.card.querySelector(
        ".testimonial-special-ability .block:nth-child(2)",
      );

      if (superpower) {
        const ability = this.getSpecialAbility(testimonial.quote.title);
        superpower.textContent = `SUPERPOWER: ${ability}`;
      }

      if (pastCompany) {
        pastCompany.textContent = testimonial.author.pastCompany;
      }
    }

    getSpecialAbility(title) {
      const abilities = {
        "Strategic Builder": "PM SHAPESHIFTING",
        "Can Do it All": "ULTRA ADAPTABILITY",
        "Super Fast": "SPEED MASTERY",
        "Deep Understanding": "USER INSIGHT",
        "Technical Prowess": "CODE WIZARDRY",
        "Action Oriented": "RAPID EXECUTION",
      };
      return abilities[title] || "SUPER POWER";
    }
  }

  new TestimonialCarousel();
</script>

<style>
  @keyframes flipTitle {
    0% {
      color: var(--color-coffee);
      opacity: 0;
    }
    50% {
      color: var(--color-coffee);
      opacity: 0.5;
    }
    100% {
      color: var(--color-ink);
      opacity: 1;
    }
  }

  @keyframes flipQuote {
    0% {
      opacity: 0;
    }
    100% {
      opacity: 1;
    }
  }

  .testimonial-item.flip .testimonial-header h2 {
    animation: flipTitle 0.3s ease-in-out forwards;
  }
  
  .testimonial-item.flip .testimonial-quote {
    animation: flipQuote 0.3s ease-in-out forwards;
  }
</style>
