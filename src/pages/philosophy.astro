---
// Import BaseLayout
import BaseLayout from "../layouts/BaseLayout.astro";
import Atom from "../components/Atom.astro";

// Import reader utility
import { getReader } from "../utils/reader";

// Import Images
import { Image } from "astro:assets";
import selfCard from "../assets/brand/karina-large.png";
import trees from "../assets/backgrounds/trees.png";

// Get the referrer and reader from URL params
const url = Astro.url;
const referrer = url.searchParams.get("referrer");
const reader = getReader();

// Add console log for debugging
console.log("URL Params:", { referrer, reader });

// Default greeting if no reader specified
const greeting = reader ? `Hello ${reader},` : "Hello stranger,";
console.log("Greeting:", greeting);

// Log the full URL for debugging
console.log("Full URL:", url.toString());
---

<BaseLayout
  title="Philosophy | Karina Tovar"
  description="My manifesto"
  includeNavigation={false}
  includeFooter={false}
>
  <div class="manifesto-container" data-referrer={referrer}>
    <!-- Background -->
    <div class="manifesto-background"></div>

    <!-- Content -->
    <div class="manifesto-content">
      <!-- Header -->
      <div class="manifesto-header">
        <Atom size="100px" />
        <h4>My Philosophy</h4>
        <h1>More Than Happy Little Pixels</h1>

        <!-- Visual -->
        <div class="manifesto-visual">
          <Image class="self" src={selfCard} alt="Karina Tovar" width={400} />
          <Image class="trees" src={trees} alt="Trees" width={1800} />
        </div>
      </div>

      <!-- Greeting
      <h2 id="greeting">{greeting}</h2>
      -->

      <!-- Text -->
      <div class="manifesto-text">
        <p>
          Design is equal parts dreaming and doing. I ask the wild “what ifs”
          and the grounded “how the hell do we make this work?” My process is
          about exploring big ideas without getting lost in the clouds—because
          at the end of the day, a product needs to work and work well. But it
          should also feel good. Life is chaotic enough without software adding
          to the pile.
        </p>
        <p>
          I’m obsessed with simplicity, clarity, and making the complicated feel
          approachable. Whether I’m turning vendor data into actionable insights
          or building tools that help someone save time, I focus on cutting the
          noise and delivering solutions that actually matter. No fluff, no
          filler—just good design doing its job.
        </p>
        <p>
          But here’s the kicker: I don’t just design for usability. I design for
          emotion. A product isn’t just a series of tasks; it’s an experience. I
          want to know how someone feels when they use what I’ve built—relieved,
          delighted, empowered. Those moments of joy and ease? That’s what I
          chase. I call them happiness metrics, and I bake them into everything
          I do.
        </p>
        <p>
          I’ve also got a soft spot for learning (even when it makes me feel
          like a dummy). Every project is a chance to dive into something new.
          Whether it’s experimenting with code, wrapping my head around AI, or
          wrestling with a tricky workflow, I embrace the mess because that’s
          where growth happens.
        </p>
        <p>
          And I bring my whole self to the work—personality, wit, and all. I’m a
          pixel philosopher and a cautious technologist, blending strategy,
          empathy, and a touch of irreverence. My designs are thoughtful and
          intentional, but never so serious they lose their spark.
        </p>
        <h2>Why hire me...</h2>
        <p>
          Because I don’t just make good-looking UIs—I build tools that make
          life easier, better, and sometimes even a little fun. I take messy,
          complicated problems and turn them into solutions that work hard and
          feel human. You won’t get bloated, buzzwordy nonsense with me—just
          bold ideas grounded in what users actually need.
        </p>
        <p>
          So, why me? Because I’ll help you dream bigger, execute smarter, and
          build products that don’t just meet expectations—they make people’s
          days suck a little less.
        </p>
      </div>

      <!-- Close button -->
      <button class="close-button" aria-label="Close manifesto">
        <span>Close</span>
      </button>
    </div>
  </div>
</BaseLayout>

<style lang="scss">
  .manifesto-container {
    width: 100vw;
    position: relative;
    inset: 0;
    z-index: 100;
    opacity: 0;
    transform: scale(0);
    animation: expandFromCenter 0.5s cubic-bezier(0.215, 0.61, 0.355, 1)
      forwards;
  }

  .manifesto-background {
    position: fixed;
    inset: 0;
    background-color: var(--color-paper);
    opacity: 0;
    animation: fadeIn 0.5s ease-out 0.2s forwards;
  }

  .manifesto-header {
    width: 100%;
    height: 100vh;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: var(--spacing-base);

    h4 {
      font-size: 16px;
      font-weight: 600;
      color: var(--color-coffee);
      font-family: var(--font-sans);
      text-transform: uppercase;
      letter-spacing: 0.1em;
      margin: var(--spacing-base) 0;
    }

    h1 {
      font-size: 100px;
      line-height: 0.9;
      max-width: 720px;
      margin: 0 auto;
      text-align: center;
    }

    .manifesto-visual {
      width: 100vw;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      gap: var(--spacing-base);
      position: relative;
      margin-top: var(--spacing-double);
      background-color: var(--color-paper);

      .self {
        position: relative;
        z-index: 2;
      }

      .trees {
        mix-blend-mode: multiply;
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 1;
        opacity: 0.5;
      }
    }
  }

  .manifesto-content {
    position: relative;
    margin: 0 auto;
    padding: var(--spacing-double) 0;
    height: 100vh;
    overflow-y: auto;
    opacity: 0;
    animation: fadeIn 0.3s ease-out 0.4s forwards;

    scrollbar-width: none;
    -ms-overflow-style: none;

    p {
      font-size: 24px;
      line-height: 1.5;
      font-weight: 400;
      margin: var(--spacing-double) 0;
    }
  }

  .manifesto-text {
    max-width: 720px;
    margin: 0 auto;
  }

  .close-button {
    position: fixed;
    top: var(--spacing-base);
    right: var(--spacing-base);
    padding: var(--spacing-small) var(--spacing-base);
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 4px;
    cursor: pointer;

    &:hover {
      background: var(--color-surface-hover);
    }
  }

  @keyframes expandFromCenter {
    from {
      opacity: 0;
      transform: scale(0);
      clip-path: circle(0% at center);
    }
    to {
      opacity: 1;
      transform: scale(1);
      clip-path: circle(150% at center);
    }
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes expandImage {
    from {
      transform: translateX(150px);
    }
    to {
      transform: translateX(0);
    }
  }

  // When closing
  .manifesto-container.closing {
    animation: collapseToCenter 0.5s cubic-bezier(0.215, 0.61, 0.355, 1)
      forwards;

    .manifesto-background {
      animation: fadeOut 0.3s ease-out forwards;
    }

    .manifesto-content {
      animation: fadeOut 0.3s ease-out forwards;
    }
  }

  @keyframes collapseToCenter {
    from {
      opacity: 1;
      transform: scale(1);
      clip-path: circle(150% at center);
    }
    to {
      opacity: 0;
      transform: scale(0);
      clip-path: circle(0% at center);
    }
  }

  @keyframes fadeOut {
    from {
      opacity: 1;
    }
    to {
      opacity: 0;
    }
  }
</style>

<script>
  // Import reader utility
  import { getReader, setReader } from "../utils/reader";

  const urlReader = new URLSearchParams(window.location.search).get("reader");
  if (urlReader) {
    setReader(urlReader);
    const greetingElement = document.getElementById("greeting");
    if (greetingElement) {
      greetingElement.textContent = `Hello ${urlReader},`;
    }
  }

  // Existing close button logic
  const container = document.querySelector(".manifesto-container");
  const closeButton = document.querySelector(".close-button");

  closeButton?.addEventListener("click", () => {
    container?.classList.add("closing");
    // Wait for animation to complete before navigating back
    setTimeout(() => {
      window.location.href = "/";
    }, 500); // Match this with your animation duration
  });

  // Handle back button
  window.addEventListener("popstate", () => {
    container?.classList.add("closing");
  });
</script>
