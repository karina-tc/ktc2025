---
interface Props {
  showTags?: boolean;
  showShare?: boolean;
  defaultActive?: boolean;
}

const { 
  showTags = true, 
  showShare = true, 
  defaultActive = false
} = Astro.props;

// Assets
import { Image } from "astro:assets";
import karina from "../../assets/brand/self-card.png";
import outline from "../../assets/brand/self-outline.svg";
import bgCard from "../../assets/backgrounds/bg-card.png";
import pattern from "../../assets/brand/self-pattern.png";
---

<figure class:list={["trading-card", { "is-active": defaultActive }]}>
  <!-- Tags -->
  {
    showTags && (
      <div class="trading-card-tags">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="524"
          height="454"
          fill="none"
        >
          <text
            xml:space="preserve"
            fill="var(--color-ink)"
            font-family="var(--font-headings)"
            font-size="18"
            letter-spacing="0"
            style="white-space:pre"
          >
            <tspan x=".138" y="132.65">
              Connection
            </tspan>
          </text>
          <path
            fill="var(--color-ink)"
            fill-rule="evenodd"
            d="M89.462 128.068c6.878-5.78 15.921-9.052 23.745-8.407 4.082.336 7.817 1.736 10.754 4.383 2.936 2.645 5.111 6.569 6.019 12.018 1.255 7.527 3.022 15.845 9.373 20.925 1.643 1.314 3.924 2.956 6.332 3.921 2.402.962 5.044 1.292 7.293-.208a.5.5 0 1 0-.555-.832c-1.846 1.231-4.091 1.023-6.366.111-2.269-.908-4.458-2.476-6.079-3.772-6.014-4.812-7.75-12.74-9.011-20.309-.939-5.634-3.206-9.776-6.336-12.597-3.129-2.819-7.083-4.286-11.342-4.637-8.152-.672-17.475 2.736-24.526 8.686l.174-3.316a.5.5 0 1 0-.999-.052l-.236 4.494a.5.5 0 0 0 .473.525l4.494.237a.5.5 0 0 0 .052-.999l-3.259-.171Z"
            clip-rule="evenodd"
          />

          <text
            xml:space="preserve"
            fill="var(--color-ink)"
            font-family="var(--font-headings)"
            font-size="18"
            letter-spacing="0"
            style="white-space:pre"
          >
            <tspan x="238.466" y="16.65">
              Happiness
            </tspan>
          </text>
          <path
            fill="var(--color-ink)"
            fill-rule="evenodd"
            d="M271.438 33.395a.5.5 0 0 1 .5.5v4.5a.5.5 0 1 1-1 0v-3.287c-4.092 4.156-7.699 8.355-9.195 12.72-.794 2.315-.988 4.668-.346 7.088.644 2.424 2.138 4.954 4.786 7.603 1.951 1.95 4.724 4.886 6.337 8.022.808 1.57 1.345 3.227 1.317 4.86-.029 1.65-.634 3.24-2.045 4.651a.5.5 0 0 1-.707-.707c1.227-1.228 1.728-2.572 1.752-3.962.024-1.408-.44-2.896-1.206-4.385-1.535-2.983-4.205-5.822-6.155-7.772-2.739-2.74-4.346-5.418-5.045-8.053-.701-2.64-.481-5.197.366-7.67 1.577-4.599 5.339-8.945 9.44-13.108h-3.299a.5.5 0 0 1 0-1h4.5Z"
            clip-rule="evenodd"
          />

          <text
            xml:space="preserve"
            fill="var(--color-ink)"
            font-family="var(--font-headings)"
            font-size="18"
            letter-spacing="0"
            style="white-space:pre"
          >
            <tspan x="480.077" y="241.65">
              Safety
            </tspan>
          </text>
          <path
            fill="var(--color-ink)"
            fill-rule="evenodd"
            d="M435.386 226.354c-3.699-.366-7.446.216-11.87 1.985-7.807 3.123-17.457 8.509-22.097 15.648a.499.499 0 1 1-.838-.545c4.818-7.412 14.719-12.893 22.564-16.031 4.543-1.818 8.453-2.436 12.339-2.052 3.878.384 7.696 1.764 12.058 3.884 6.31 3.067 12.669 6.126 19.524 6.462l-2.298-2.298a.5.5 0 0 1 .707-.707l3.182 3.182a.499.499 0 0 1 0 .707l-3.182 3.182a.5.5 0 0 1-.707-.707l2.355-2.355c-7.141-.322-13.714-3.502-20.018-6.567-4.317-2.098-8.012-3.421-11.719-3.788Z"
            clip-rule="evenodd"
          />

          <text
            xml:space="preserve"
            fill="var(--color-ink)"
            font-family="var(--font-headings)"
            font-size="18"
            letter-spacing="0"
            style="white-space:pre"
          >
            <tspan x="468.887" y="417.117">
              Growth
            </tspan>
          </text>
          <path
            fill="var(--color-ink)"
            fill-rule="evenodd"
            d="M421.5 368.75a.5.5 0 0 1 .5-.5c7.755 0 13.179 6.403 16.738 12.504 2.191 3.755 3.034 7.739 3.333 11.784.207 2.789.155 5.64.104 8.467-.022 1.252-.045 2.499-.045 3.734 0 1.884.841 3.273 2.226 4.326 1.404 1.067 3.365 1.783 5.554 2.253 3.809.819 8.153.869 11.08.868l-2.33-2.33a.5.5 0 0 1 .707-.707l3.182 3.182a.5.5 0 0 1 0 .707l-3.182 3.182a.5.5 0 0 1-.707-.707l2.327-2.327c-2.93.001-7.373-.048-11.288-.89-2.25-.484-4.375-1.239-5.949-2.435-1.593-1.212-2.62-2.879-2.62-5.122 0-1.275.023-2.544.046-3.807.051-2.804.101-5.578-.102-8.32-.293-3.956-1.112-7.775-3.199-11.354-3.545-6.078-8.712-12.008-15.875-12.008a.5.5 0 0 1-.5-.5Z"
            clip-rule="evenodd"
          />

          <text
            xml:space="preserve"
            fill="var(--color-ink)"
            font-family="var(--font-headings)"
            font-size="18"
            letter-spacing="0"
            style="white-space:pre"
          >
            <tspan x="29.198" y="446.927">
              Security
            </tspan>
          </text>
          <path
            fill="var(--color-ink)"
            fill-rule="evenodd"
            d="M114.022 415.511c-8.593-4.186-21.496-4.197-30.454-.863-2.718 1.011-6.774 2.92-10.14 5.455-2.933 2.209-5.237 4.813-5.808 7.637l2.192-2.192a.5.5 0 0 1 .707.707l-3.182 3.182a.5.5 0 0 1-.707 0l-3.182-3.182a.5.5 0 1 1 .707-.707l2.411 2.411c.496-3.374 3.162-6.322 6.26-8.655 3.466-2.61 7.615-4.56 10.394-5.594 9.174-3.413 22.365-3.422 31.24.902 8.873 4.323 17.797 5.112 26.147.937a.5.5 0 0 1 .447.895c-8.696 4.348-17.956 3.489-27.032-.933Z"
            clip-rule="evenodd"
          />
        </svg>
      </div>
    )
  }

  <div id="tradingCard" class="trading-card-core">
    <!-- Outline -->
    <div class="outline">
      <Image
        src={outline}
        alt="Outline"
        draggable={false}
        loading="lazy"
        decoding="async"
      />
    </div>
    <!-- Self Images -->
    <Image
      class="self clone"
      src={karina}
      alt="Karina"
      draggable={false}
      loading="lazy"
      decoding="async"
    />
    <Image
      class="self"
      src={karina}
      alt="Karina"
      draggable={false}
      loading="lazy"
      decoding="async"
    />
    <!-- Shine -->
    <div class="card-shine top-left"></div>
    <!-- Label -->
    <div class="trading-card-label">
      <span>SUPER DESIGNER</span>
      <span>KTC Â· {new Date().getFullYear()}</span>
    </div>
    <!-- Pattern -->
    <div class="pattern">
      <Image
        src={pattern}
        alt="Pattern"
        draggable={false}
        loading="lazy"
        decoding="async"
      />
    </div>
  </div>
  <!-- Details -->
  <figcaption>
    <span class="hint">Hover over me</span>
    <div class="details">
      <div class="detail">
        <span>Experience:</span>
        <span>10 years</span>
      </div>
      <div class="detail">
        <span>Level:</span>
        <span>Super IC</span>
      </div>
      <div class="detail">
        <span>Superpower:</span>
        <span>Focus & Speed</span>
      </div>
    </div>
  </figcaption>
</figure>

<style define:vars={{ bgCardUrl: `url(${bgCard.src})` }}>
  .trading-card {
    position: relative;
    width: 100%;
    max-width: fit-content;
    height: 100%;
    margin: 0 auto;
    min-height: 500px;
    padding: var(--spacing-base);

    display: flex;
    flex-direction: column;
    gap: var(--spacing-small);
    justify-content: center;
    align-items: center;

    &:hover,
    &.is-active {
      .trading-card-tags svg path,
      .trading-card-tags svg text {
        fill: var(--color-coffee);
        opacity: 0.5;
      }
      .trading-card-core {
        border-radius: 12px;

        .self {
          margin-bottom: 32px;
          transform-origin: center center;
          transition-delay: 0.2s;
          filter: drop-shadow(0 2px 10px rgba(114, 93, 93, 0.8));
        }

        .self.clone {
          opacity: 0.5;
        }
      }

      .outline {
        bottom: 32px;
        transform-origin: center center;
        transition-delay: 0.2s;
      }

      figcaption .details {
        top: 0px;
        opacity: 1;
        visibility: visible;
      }

      .trading-card-core {
        border: 4px solid var(--color-paper);
        .trading-card-label {
          bottom: 0;
          opacity: 1;
          span {
            opacity: 1;
            transition-delay: 0.1s;
            &:first-child {
              margin-left: 0;
            }
            &:last-child {
              margin-right: 0;
            }
          }
        }

        .pattern {
          opacity: 0.35;
          transition-delay: 0.1s;
        }
      }
    }

    figcaption {
      width: 100%;
      height: fit-content;
      position: relative;
      font-family: var(--font-sans);

      & .hint {
        display: inline-block;
        width: 100%;
        font-size: 10px;
        text-transform: uppercase;
        text-align: center;
        letter-spacing: 0.1em;
        font-weight: 600;
        opacity: 0.5;
      }

      .details {
        visibility: hidden;
        pointer-events: none;
        position: absolute;
        width: 100%;
        top: 80px;
        opacity: 0;
        z-index: 10;
        transition: all 0.3s cubic-bezier(0.215, 0.61, 0.355, 1);
        transform-style: preserve-3d;
        backface-visibility: hidden;
        will-change: transform;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 0 20px rgba(114, 93, 93, 0.5);

        padding: 12px 20px;
        font-weight: 500;
        letter-spacing: 0.1em;
        text-transform: uppercase;
        color: var(--color-paper);
        font-size: 12px;
        font-family: var(--font-mono);
        background-color: var(--color-coal-light);
      }

      & .detail {
        width: 100%;

        display: flex;
        justify-content: space-between;
        align-items: center;
        height: 28px;
      }
    }

    .card-shine {
      position: absolute;
      width: 100%;
      height: 100%;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      pointer-events: none;
      opacity: 0;
      mix-blend-mode: screen;
      transition: all 0.3s cubic-bezier(0.215, 0.61, 0.355, 1);
      z-index: 0;

      &.top-left {
        background: linear-gradient(
          151deg,
          rgba(255, 255, 255, 0.8) 0%,
          #fff 17%,
          rgba(255, 255, 255, 0.8) 32%,
          rgba(255, 255, 255, 0) 100%
        );
      }

      &.top-right {
        background: linear-gradient(
          217deg,
          rgba(255, 255, 255, 0.8) 0%,
          #fff 17%,
          rgba(255, 255, 255, 0.8) 32%,
          rgba(255, 255, 255, 0) 100%
        );
      }

      &.bottom-left {
        background: linear-gradient(
          37deg,
          rgba(255, 255, 255, 0.8) 0%,
          #fff 17%,
          rgba(255, 255, 255, 0.8) 32%,
          rgba(255, 255, 255, 0) 100%
        );
      }

      &.bottom-right {
        background: linear-gradient(
          327deg,
          rgba(255, 255, 255, 0.8) 0%,
          #fff 17%,
          rgba(255, 255, 255, 0.8) 32%,
          rgba(255, 255, 255, 0) 100%
        );
      }
    }

    .trading-card-tags {
      position: absolute;
      top: -10%;
      left: -255;
      width: 524px;
      height: 100%;
      z-index: 1;

      display: flex;
      justify-content: center;
      align-items: center;
      pointer-events: none;
      svg {
        width: 100%;
        object-fit: contain;
        height: auto;
        display: block;
        transition: all 0.3s ease;
      }
    }

    .trading-card-core {
      position: relative;
      width: 100%;
      max-width: 340px;
      height: 450px;
      overflow: hidden;
      cursor: pointer;
      border-radius: 160px 160px 0 0;

      display: flex;
      justify-content: center;
      align-items: end;

      transform-style: preserve-3d;
      transform: perspective(1000px);
      transition: all 0.3s cubic-bezier(0.215, 0.61, 0.355, 1);

      background-image: var(--bgCardUrl);
      background-repeat: no-repeat;
      background-position: center center;
      background-size: cover;
      filter: drop-shadow(0 0 10px rgba(145, 123, 123, 0.5));
      border: 1px solid var(--color-surface);
    }

    .outline,
    .pattern {
      position: absolute;
      bottom: 0;
      left: 0;
      width: 100%;
      height: 100%;

      display: flex;
      justify-content: center;
      align-items: end;
    }

    .outline {
      z-index: 2;
      transition: all 0.3s cubic-bezier(0.215, 0.61, 0.355, 1);
    }

    .pattern {
      mix-blend-mode: luminosity;
      opacity: 0;
      transition: opacity 0.3s ease;
      z-index: 0;
    }

    img {
      width: 100%;
      height: auto;
      margin: 0 auto;
    }

    .self {
      z-index: 1;
      position: relative;
      mix-blend-mode: overlay;
      filter: drop-shadow(0 2px 10px rgba(145, 123, 123, 0.8));
      transition: all 0.3s cubic-bezier(0.215, 0.61, 0.355, 1);
      backface-visibility: hidden;
      transform-style: preserve-3d;
      will-change: transform;
      image-rendering: -webkit-optimize-contrast;
      image-rendering: crisp-edges;
      -webkit-font-smoothing: subpixel-antialiased;
      -webkit-transform-style: preserve-3d;
      -webkit-backface-visibility: hidden;
      -webkit-perspective: 1000;
      perspective: 1000;
      transform: translateZ(0);
      -webkit-transform: translateZ(0);

      &.clone {
        position: absolute;
        bottom: 0;
        left: 0;
        opacity: 0;
      }
    }

    .trading-card-label {
      position: absolute;
      bottom: -80px;
      left: 0;
      width: 100%;
      padding: 8px 16px;
      color: var(--color-coal-light);
      font-size: 14px;
      font-weight: 600;
      letter-spacing: 0.1em;
      font-family: var(--font-sans);
      background-color: var(--color-paper);
      z-index: 2;
      overflow: hidden;

      opacity: 0;
      transition: all 0.3s ease;

      display: flex;
      justify-content: space-between;
      align-items: center;
      transition: all 0.3s cubic-bezier(0.215, 0.61, 0.355, 1);

      span {
        opacity: 0;
        transition: all 0.3s cubic-bezier(0.215, 0.61, 0.355, 1);
        &:first-child {
          margin-left: -100%;
        }
        &:last-child {
          margin-right: -100%;
          font-family: var(--font-mono);
        }
      }
    }
  }
</style>

<script>
  (() => {
    // Constants
    const SELECTORS = {
      card: "#tradingCard",
      shine: ".card-shine",
      details: ".details",
    } as const;

    const TRANSFORMS = {
      default: "perspective(1000px) rotateX(0deg) rotateY(0deg)",
      get: (rotateX: number, rotateY: number) =>
        `perspective(1000px) rotateX(${rotateX}deg) rotateY(${rotateY}deg)`,
    } as const;

    const CONFIG = {
      maxRotation: 8,
      shineOpacity: 0.25,
      transitionTiming: "0.3s cubic-bezier(0.215, 0.61, 0.355, 1)",
    } as const;

    // Add new constant for active class
    const ACTIVE_CLASS = "is-active";

    // Element selection with type safety
    const tradingCard = document.querySelector(".trading-card") as HTMLElement;
    const card = document.querySelector(SELECTORS.card) as HTMLElement;
    if (!card || !tradingCard) return;
    const shine = card.querySelector(SELECTORS.shine) as HTMLElement;
    if (!shine) return;

    // Toggle function
    const toggleActiveState = () => {
      tradingCard.classList.toggle(ACTIVE_CLASS);
    };

    // Add click handler
    tradingCard.addEventListener("click", toggleActiveState);

    // Utility functions
    const calculateRotation = (position: number, center: number) =>
      ((position - center) / center) * CONFIG.maxRotation;

    const getQuadrant = (
      x: number,
      centerX: number,
      y: number,
      centerY: number,
    ) => ({
      isLeft: x < centerX,
      isTop: y < centerY,
    });

    const updateShineClass = (isLeft: boolean, isTop: boolean) => {
      shine.classList.remove(
        "top-left",
        "top-right",
        "bottom-left",
        "bottom-right",
      );

      if (isLeft && isTop) shine.classList.add("bottom-right");
      else if (!isLeft && isTop) shine.classList.add("bottom-left");
      else if (isLeft && !isTop) shine.classList.add("top-right");
      else shine.classList.add("top-left");
    };

    const updateElements = (rotateX: number, rotateY: number) => {
      card.style.transform = TRANSFORMS.get(rotateX, rotateY);

      const details = document.querySelector(SELECTORS.details) as HTMLElement;
      if (details) {
        details.style.transform = TRANSFORMS.get(-rotateX, -rotateY);
      }

      shine.style.opacity = CONFIG.shineOpacity.toString();
    };

    const resetElements = () => {
      card.style.transform = TRANSFORMS.default;
      shine.style.opacity = "0";

      const details = document.querySelector(SELECTORS.details) as HTMLElement;
      if (details) {
        details.style.transform = TRANSFORMS.default;
      }
    };

    // Event handler
    const handleMove = (e: MouseEvent | Touch) => {
      const rect = card.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;

      const centerX = rect.width / 2;
      const centerY = rect.height / 2;

      const rotateY = calculateRotation(x, centerX);
      const rotateX = -calculateRotation(y, centerY);

      const { isLeft, isTop } = getQuadrant(x, centerX, y, centerY);

      updateShineClass(isLeft, isTop);
      updateElements(rotateX, rotateY);
    };

    // Event listeners
    card.addEventListener("mousemove", (e) => handleMove(e));
    card.addEventListener("mouseleave", resetElements);
    card.addEventListener("touchmove", (e) => {
      e.preventDefault();
      handleMove(e.touches[0]);
    });
  })();
</script>
