---
import { Image } from "astro:assets";
import { details, links, contactInfo } from "../../data/details";
import Subtitle from "../Subtitle.astro";
import avatar from "../../assets/brand/avatar.png";

interface Props {
  reader?: string | null;
}

const { reader } = Astro.props;

// Function to append reader to URLs only if reader exists
const appendReader = (href: string) => {
  if (!reader || reader === "null") return href;
  const separator = href.includes("?") ? "&" : "?";
  const newHref = `${href}${separator}reader=${reader}`;
  return newHref;
};
---

<aside class="details-section w-full">
  <div
    class="listing relative font-sans text-ink-secondary p-5 bg-white/75 dark:bg-chocolate border border-white/25 dark:border-coffee overflow-hidden shadow-md backdrop-blur-md rounded-xl">
    <Subtitle title="Karina Tovar Castro" />

    <div
      class="avatar w-[calc(100%+50px)] h-[100px] md:h-[200px] flex justify-center items-center -ml-[25px] mb-5 bg-chocolate dark:bg-ink-secondary">
      <Image
        src={avatar}
        alt="Karina Tovar"
        width={600}
        draggable={false}
        class="w-full h-full object-cover mix-blend-lighten transition-all duration-300 ease-in-out"
      />
    </div>

    <div class="details">
      <h5
        class="subtitle text-xs font-semibold font-mono uppercase tracking-widest text-ink-tertiary mb-2 opacity-75 dark:opacity-100">
        Details
      </h5>
      {
        details.map(({ label, value }) => (
          <div class="detail w-full h-7 flex justify-between items-center tracking-widest uppercase font-medium text-[10px] font-mono dark:text-white">
            <span>{label}:</span>
            <span>{value}</span>
          </div>
        ))
      }
    </div>
  </div>

  <div
    class="links flex flex-col items-start gap-5 bg-white/75 dark:bg-chocolate overflow-hidden shadow-md backdrop-blur-md rounded-xl py-5 pb-2 border border-white/25 dark:border-coffee border-t-0">
    <ul
      class="w-full flex flex-col items-start list-none -my-2 mb-2 px-2 list-none !mx-0">
      {
        links.map(({ icon, iconLight, href, text }) => (
          <li
            class="w-full flex justify-start items-center gap-2 p-2 pl-2 rounded-md 
            transition-all duration-200 ease-in-out hover:bg-white/50"
          >
            <Image src={icon} alt={`${text} icon`} class="w-8 h-8 dark:hidden" />
            <Image src={iconLight} alt={`${text} icon`} class="w-8 h-8 hidden dark:block" />
            <a
              href={appendReader(href)}
              class="flex-1 h-full font-medium text-sm underline underline-offset-[4px] decoration-coffee decoration-2 
              hover:decoration-accent"
            >
              {text}
            </a>
          </li>
        ))
      }
    </ul>

    <div
      class="contact w-full flex flex-col items-start -mt-5 px-5 pt-8 pb-4 border-t border-dashed border-white/50 dark:border-coffee">
      <h5
        class="subtitle text-xs font-semibold font-mono uppercase tracking-widest text-ink-tertiary mb-2 opacity-75">
        Contact Email
      </h5>
      <a href={`mailto:${contactInfo.email}`} class="font-light text-3xl font-instrument-serif caramel-text">
        {contactInfo.email}
      </a>
    </div>
  </div>
</aside>

<script>
  // Get reader from URL on the client side
  const urlParams = new URLSearchParams(window.location.search);
  const reader = urlParams.get("reader");

  // Update all links to include reader parameter
  if (reader) {
    document
      .querySelectorAll('.links a:not([href^="mailto:"])')
      .forEach((link) => {
        const href = link.getAttribute("href");
        if (href) {
          const separator = href.includes("?") ? "&" : "?";
          link.setAttribute("href", `${href}${separator}reader=${reader}`);
        }
      });
  }
</script>
