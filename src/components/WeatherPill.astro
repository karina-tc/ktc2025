---
/**
 * Weather information display using the HoverPill component.
 * Fetches real-time weather data and displays appropriate icons and styling.
 * 
 * @component
 * @example
 * ```astro
 * <WeatherPill />
 * ```
 * 
 * Weather States:
 * - cold: Below 50째F with blue theme
 * - warm: 50-90째F with yellow theme
 * - hot: Above 90째F with red theme
 * - rain: Any rain with gray theme
 * - snow: Any snow with white theme
 * 
 * Testing:
 * Use the browser console to test different temperatures:
 * ```js
 * setWeatherTemp(75) // Sets temperature to 75째F
 * ```
 */

// Components
import HoverPill from "./HoverPill.astro";

// Assets
import { Image } from "astro:assets";
import CloudRain from "../assets/icons/weather/CloudRain.svg";
import Sun from "../assets/icons/weather/Sun.svg";
import Snowflake from "../assets/icons/weather/Snowflake.svg";
import RainbowCloud from "../assets/icons/weather/RainbowCloud.svg";

type WeatherType = "cold" | "warm" | "hot" | "rain" | "snow";

interface WeatherState {
  text: string;
  type: WeatherType;
  icon: ImageMetadata;
}

// Default fallback
let weatherText = "lovely";
let weatherType = "warm";
let weatherIcon = RainbowCloud;

// Define shared weather states
const weatherStates = {
  default: { text: "lovely", type: "warm", icon: RainbowCloud },
  veryCold: { text: "very cold", type: "cold", icon: Snowflake },
  bitCold: { text: "a bit cold", type: "cold", icon: Snowflake },
  nice: { text: "nice and toasty", type: "warm", icon: RainbowCloud },
  warm: { text: "warm and sunny", type: "warm", icon: Sun },
  hot: { text: "very hot", type: "hot", icon: Sun },
  rain: { text: "raining and warm", type: "rain", icon: CloudRain },
  snow: { text: "snowing and cold", type: "snow", icon: Snowflake },
} as const;

// Coordinates for PA
// Coordinates for PA
const CITY_LAT = 40.3101;
const CITY_LONG = -75.1299;

// Get weather info
function getWeatherInfo(
  temp: number,
  rain: number,
  snow: number,
): WeatherState {
  if (rain > 0) return weatherStates.rain;
  if (snow > 0) return weatherStates.snow;
  if (temp <= 35) return weatherStates.veryCold;
  if (temp <= 50) return weatherStates.bitCold;
  if (temp <= 70) return weatherStates.nice;
  if (temp <= 90) return weatherStates.warm;
  return weatherStates.hot;
}

// Fetch weather data
try {
  const response = await fetch(
    `https://api.open-meteo.com/v1/forecast?latitude=${CITY_LAT}&longitude=${CITY_LONG}&hourly=temperature_2m,rain,snowfall&current_weather=true`,
  );
  const data = await response.json();

  // Check if weather data is available
  if (data.current_weather) {
    const currentTemp = data.current_weather.temperature;
    const currentHourIndex = new Date().getHours();
    const currentRain = data.hourly.rain[currentHourIndex];
    const currentSnow = data.hourly.snowfall[currentHourIndex];

    const weatherInfo = getWeatherInfo(currentTemp, currentRain, currentSnow);
    weatherText = weatherInfo.text;
    weatherType = weatherInfo.type;
    weatherIcon = weatherInfo.icon as typeof RainbowCloud;
  }
} catch (error) {
  console.error("Failed to fetch weather data:", error);
}

const pillType = `weather-${weatherType}`;
---

<HoverPill 
  text={weatherText}
  icon={weatherIcon}
  iconAlt={weatherType}
  pillType={pillType}
/>

<script src="../scripts/weatherTester.ts"></script>

<style lang="scss">
  :global(.hover-pill.pill-weather-cold) {
    --pill-bg-color: #e3f2fd;
    --pill-icon-color: #2196f3;
  }

  :global(.hover-pill.pill-weather-warm) {
    --pill-bg-color: #fff8e1;
    --pill-icon-color: #ffc107;
  }

  :global(.hover-pill.pill-weather-hot) {
    --pill-bg-color: #ffebee;
    --pill-icon-color: #f44336;
  }

  :global(.hover-pill.pill-weather-rain) {
    --pill-bg-color: #f5f5f5;
    --pill-icon-color: #9e9e9e;
  }

  :global(.hover-pill.pill-weather-snow) {
    --pill-bg-color: #ffffff;
    --pill-icon-color: #e0e0e0;
  }
</style>
