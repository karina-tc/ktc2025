---
// Components
import BaseLayout from "../layouts/BaseLayout.astro";
import ShareDetails from "../components/_partials/ShareDetails.astro";
import Atom from "../components/Atom.astro";

// Utils
import { personalInfo } from "../data/metadata";

// Get the reader from URL params
const url = Astro.url;
const reader = url.searchParams.get("reader");

// Default greeting if no reader specified
const greeting = reader ? `${reader}` : "friend";

const socialLinks = [
  { type: "button", text: "Share", action: "share" },
  {
    type: "link",
    text: "LinkedIn",
    href: personalInfo.social.linkedin.url,
  },
  { type: "link", text: "GitHub", href: personalInfo.social.github.url },
];
---

<BaseLayout
  title="Share | Karina Tovar"
  description="Karina Tovar - Lead Product Designer"
  includeNavigation={false}
  includeFooter={false}
>
  <div class="main-wrapper">
    <div class="content-wrapper">
      <Atom />
      <h1 id="greeting">Hello {greeting}</h1>
    </div>
    <!-- Details -->
    <div class="details-wrapper">
      <ShareDetails reader={reader} />
    </div>

    <button class="footnote">
      <span>Have a joyful day!</span>
    </button>
  </div>

  <div class="background-wrapper"></div>
</BaseLayout>

<script>
  // Import reader utility
  import { getReader, setReader } from "../utils/reader";

  const urlReader = new URLSearchParams(window.location.search).get("reader");
  if (urlReader) {
    setReader(urlReader);
    const greetingElement = document.getElementById("greeting");
    if (greetingElement) {
      greetingElement.textContent = `Hello ${urlReader}`;
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
    // Target the Share button by finding the button with text "Share"
    const shareButton = Array.from(
      document.querySelectorAll(".share-section button"),
    ).find((button) => button.textContent === "Share");

    if (shareButton) {
      shareButton.addEventListener("click", async () => {
        const currentUrl = window.location.href;
        try {
          await navigator.clipboard.writeText(currentUrl);
          shareButton.textContent = "Copied!";
          setTimeout(() => {
            shareButton.textContent = "Share";
          }, 2000);
        } catch (err) {
          alert("Failed to copy URL");
        }
      });
    }
  });
</script>

<style lang="scss">
  @import "../styles/base/_breakpoints.scss";

  // Layout
  .main-wrapper {
    position: relative;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    justify-content: flex-start;
    gap: var(--spacing-base);
    margin: var(--spacing-triple) auto 0;
    min-height: 100vh;
    width: 100%;
    max-width: 420px;
    z-index: 10;
  }

  // Content section
  .content-wrapper {
    opacity: 0;
    animation: fadeInDown 0.5s ease-in-out forwards;
    animation-delay: 0.3s;

    h1 {
      margin: var(--spacing-base) 0;
      color: var(--color-chocolate);
      font-size: clamp(2.5rem, 5vw, 3rem);
    }
  }

  // Details section
  .details-wrapper {
    opacity: 0;
    animation: fadeInUp 0.5s ease-in-out forwards;
    animation-delay: 0.3s;

    :global(.subtitle) {
      margin-top: 10px;
      font-family: var(--font-headings);
    }
  }

  // Artwork attribution
  .footnote {
    width: 100%;
    display: flex;
    font-size: var(--font-size-xsmall);
    font-family: var(--font-sans);
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.1em;
    color: var(--color-chocolate);
    background-color: rgba(255, 255, 255, 0.05);
    border-radius: 2px;
    backdrop-filter: blur(2px);
    opacity: 0;
    animation: fadeInUp 0.5s ease-in-out forwards;
    animation-delay: 0.8s;
    span {
      position: relative;
      z-index: 1;
      padding: 4px 6px;
      transition: color 0.1s ease-in-out;

      &::after {
        content: "";
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 1px;
        background-color: var(--color-chocolate);
        z-index: -1;
        border-radius: 4px;
        transition:
          height 0.3s ease-in-out,
          background-color 0.1s ease-in-out;
      }
    }

    &:hover {
      span {
        color: var(--color-paper);
      }
      span::after {
        height: 100%;
        background-color: var(--color-chocolate);
      }
    }
  }

  // Background
  .background-wrapper {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    opacity: 0;
    filter: blur(5px);
    background-image: url("https://cdn.midjourney.com/497b28f6-d510-4ce6-b5a4-b6398bcc2865/0_3.png");
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    background-attachment: fixed;
    animation: fadeIn 0.5s ease-in-out forwards;
  }

  // Animations
  @keyframes fadeInDown {
    from {
      opacity: 0;
      transform: translateY(-10%);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(10%);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes fadeIn {
    0% {
      opacity: 0;
      filter: blur(100px);
    }
    100% {
      opacity: 0.5;
      filter: blur(5px);
    }
  }
</style>
